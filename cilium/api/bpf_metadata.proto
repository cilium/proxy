syntax = "proto3";

option go_package = "github.com/cilium/proxy/go/cilium/api;cilium";

package cilium;

import "google/protobuf/duration.proto";

message BpfMetadata {
  // File system root for bpf. Bpf will not be used if left empty.
  string bpf_root = 1;

  // 'true' if the filter is on ingress listener, 'false' for egress listener.
  bool is_ingress = 2;

  // Use of the original source address requires kernel datapath support which
  // may or may not be available. 'true' if original source address
  // should be used. Original source address use may still be
  // skipped in scenarios where it is knows to not work.
  bool use_original_source_address = 3;

  // True if the listener is used for an L7 LB. In this case policy enforcement is done on the
  // destination selected by the listener rather than on the original destination address. For
  // local sources the source endpoint ID is set in socket mark instead of source security ID if
  // 'use_original_source_address' is also true, so that the local source's egress policy is
  // enforced on the bpf datapath.
  // Only valid for egress.
  bool is_l7lb = 4;

  // Source address to be used whenever the original source address is not used.
  // Either ipv4_source_address or ipv6_source_address depending on the address
  // family of the destination address. If left empty, and no Envoy Cluster Bind
  // Config is provided, the source address will be picked by the local IP stack.
  string ipv4_source_address = 5;
  string ipv6_source_address = 6;

  // True if policy should be enforced on l7 LB used. The policy bound to the configured
  // ipv[46]_source_addresses, which must be explicitly set, applies. Ingress policy is
  // enforced on the security identity of the original (e.g., external) source. Egress
  // policy is enforced on the security identity of the backend selected by the load balancer.
  //
  // Deprecation note: This option will be forced 'true' and deprecated when Cilium 1.15 is
  // the oldest supported release.
  bool enforce_policy_on_l7lb = 7;

  // proxy_id is passed to access log messages and allows relating access log messages to
  // listeners.
  uint32 proxy_id = 8;

  // policy_update_warning_limit is the time in milliseconds after which a warning is logged if
  // network policy update took longer
  // Deprecated, has no effect.
  google.protobuf.Duration policy_update_warning_limit = 9;

  // l7lb_policy_name is the name of the L7LB policy that is enforced on the listener.
  // This is optional field.
  string l7lb_policy_name = 10;

  // original_source_so_linger_time specifies the number of seconds to linger on socket close.
  // Only used if use_original_source_address is also true, and the original source address
  // is used in the upstream connections. Value 0 causes connections to be reset on close (TCP RST).
  // Values above 0 cause the Envoy worker thread to block up to the given number of seconds while
  // the connection is closing. If the timeout is reached the connection is being reset (TCP RST).
  // This option may be needed for allowing new connections to successfully bind to the original
  // source address and port.
  optional uint32 original_source_so_linger_time = 11;

  // Name of the pin file for opening bpf ipcache in "<bpf_root>/tc/globals/". If empty, defaults to
  // "cilium_ipcache" for backwards compatibility.
  // Only used if 'bpf_root' is non-empty and 'use_nphds' is 'false'.
  string ipcache_name = 12;

  // Use Network Policy Hosts xDS (NPHDS) protocol to sync IP/ID mappings.
  // Network Policy xDS (NPDS) will only be used if this is 'true' or 'bpf_root' is non-empty.
  // If 'use_nphds' is 'false' ipcache named by 'ipcache_name' is used instead.
  bool use_nphds = 13;

  // Duration to reuse ipcache results until the entry is looked up from bpf ipcache again.
  // Defaults to 3 milliseconds.
  google.protobuf.Duration cache_entry_ttl = 14;

  // Cache is garbage collected at interval 10 times the ttl (default 30 ms).
  google.protobuf.Duration cache_gc_interval = 15;
}
