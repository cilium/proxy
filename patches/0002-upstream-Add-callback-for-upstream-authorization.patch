From 2aaec87a26464142252888f9f04e3f50bc2542be Mon Sep 17 00:00:00 2001
From: Jarno Rajahalme <jarno@isovalent.com>
Date: Fri, 21 Jan 2022 15:42:00 +0200
Subject: [PATCH 2/4] upstream: Add callback for upstream authorization

Add new StreamDecoderFilterCallbacks addUpstreamCallback() and
iterateUpstreamCallbacks(). Decoder filters can add callbacks using
addUpstreamCallback(), which will then get called after an upstream
connection has been established and all header transformations have been
performed, and just before upstream headers are encoded by the
router. If any of the callbacks returns 'false', the router will issue
a 403 local response instead of encoding the request upstream.

This allows HTTP decoder filters to perform policy enforcement on the
upstream requests taking effect after all potential header
transformations have been performed.

Callbacks can safely refer to memory held by the filter instance
adding the callback, as the calls to the callbacks are only ever be
done from the router filter in the same filter chain.

Signed-off-by: Jarno Rajahalme <jarno@isovalent.com>

diff --git a/envoy/http/filter.h b/envoy/http/filter.h
index 88123f71b2..7b529bec55 100644
--- a/envoy/http/filter.h
+++ b/envoy/http/filter.h
@@ -463,6 +463,24 @@ public:
    */
   virtual void onDecoderFilterBelowWriteBufferLowWatermark() PURE;
 };
+
+/**
+ * UpstreamCallback can be used to reject upstream host selection made by the router.
+ * This callback is passed the StreamInfo, and the final headers that can be used by
+ * the callback to inform its decision.
+ *
+ * The callback is called right befere the request is encoded on the already connected
+ * upstream connection. At this stage all header manipulations in the Envoy configuration
+ * have been performed so that the callback may inspect the final headers.
+ *
+ * UpstreamCallback may not be called if a local reply is issued instead or forwarding
+ * the request.
+ *
+ * Returning 'true' allows the request to be forwarded. Returning 'false' prevents the
+ * request from being forwarded, and a 403 local response is issued instead.
+ */
+using UpstreamCallback = std::function<bool(Http::RequestHeaderMap&, StreamInfo::StreamInfo&)>;
+
 /**
  * Stream decoder filter callbacks add additional callbacks that allow a
  * decoding filter to restart decoding if they decide to hold data (e.g. for
@@ -759,6 +777,18 @@ public:
    */
   virtual bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr,
                                         StreamInfo::StreamInfo&) PURE;
+
+  /*
+   * Adds the given callback to be executed later via 
+   */
+  virtual void addUpstreamCallback(const UpstreamCallback& cb) PURE;
+
+  /**
+   * Invokes all the added callbacks before forwarding requests from this stream upstream.
+   * Returns 'false' if any of the callbacks rejects the request, 'true' otherwise.
+   */
+  virtual bool iterateUpstreamCallbacks(Http::RequestHeaderMap&,
+                                        StreamInfo::StreamInfo&) PURE;
 };
 
 /**
diff --git a/source/common/http/async_client_impl.h b/source/common/http/async_client_impl.h
index b55a169101..0dfb0f5bcb 100644
--- a/source/common/http/async_client_impl.h
+++ b/source/common/http/async_client_impl.h
@@ -486,6 +486,11 @@ private:
                                 StreamInfo::StreamInfo&) override {
     return true;
   }
+  void addUpstreamCallback(const UpstreamCallback&) override {}
+  bool iterateUpstreamCallbacks(Http::RequestHeaderMap&,
+                                StreamInfo::StreamInfo&) override {
+    return true;
+  }
 
   // ScopeTrackedObject
   void dumpState(std::ostream& os, int indent_level) const override {
diff --git a/source/common/http/filter_manager.cc b/source/common/http/filter_manager.cc
index 2190b0b2fe..5a2dc09b60 100644
--- a/source/common/http/filter_manager.cc
+++ b/source/common/http/filter_manager.cc
@@ -1500,6 +1500,19 @@ bool FilterManager::createFilterChain() {
   return !upgrade_rejected;
 }
 
+void FilterManager::addUpstreamCallback(const UpstreamCallback& cb) {
+  decoder_filter_upstream_cbs_.emplace_back(cb);
+}
+  
+bool FilterManager::iterateUpstreamCallbacks(Http::RequestHeaderMap& headers,
+                                             StreamInfo::StreamInfo& upstream_info) {
+  bool accept = true;
+  for (const auto& cb : decoder_filter_upstream_cbs_) {
+    accept = accept && cb(headers, upstream_info);
+  }
+  return accept;
+}
+
 void ActiveStreamDecoderFilter::requestDataDrained() {
   // If this is called it means the call to requestDataTooLarge() was a
   // streaming call, or a 413 would have been sent.
@@ -1726,5 +1739,14 @@ bool ActiveStreamDecoderFilter::iterateUpstreamCallbacks(Upstream::HostDescripti
 
 }
 
+void ActiveStreamDecoderFilter::addUpstreamCallback(const UpstreamCallback& cb) {
+  parent_.addUpstreamCallback(cb);
+}
+
+bool ActiveStreamDecoderFilter::iterateUpstreamCallbacks(Http::RequestHeaderMap& headers,
+                                                         StreamInfo::StreamInfo& stream_info) {
+  return parent_.iterateUpstreamCallbacks(headers, stream_info);
+}
+
 } // namespace Http
 } // namespace Envoy
diff --git a/source/common/http/filter_manager.h b/source/common/http/filter_manager.h
index 3fc168de60..149fa39049 100644
--- a/source/common/http/filter_manager.h
+++ b/source/common/http/filter_manager.h
@@ -242,6 +242,9 @@ struct ActiveStreamDecoderFilter : public ActiveStreamFilterBase,
   absl::optional<absl::string_view> upstreamOverrideHost() const override;
   bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr host,
                                 StreamInfo::StreamInfo& stream_info) override;
+  void addUpstreamCallback(const UpstreamCallback& cb) override;
+  bool iterateUpstreamCallbacks(Http::RequestHeaderMap& headers,
+                                StreamInfo::StreamInfo& stream_info) override;
 
   // Each decoder filter instance checks if the request passed to the filter is gRPC
   // so that we can issue gRPC local responses to gRPC requests. Filter's decodeHeaders()
@@ -987,6 +990,9 @@ private:
     return request_metadata_map_vector_.get();
   }
 
+  void addUpstreamCallback(const UpstreamCallback&);
+  bool iterateUpstreamCallbacks(Http::RequestHeaderMap&, StreamInfo::StreamInfo&);
+
   FilterManagerCallbacks& filter_manager_callbacks_;
   Event::Dispatcher& dispatcher_;
   // This is unset if there is no downstream connection, e.g. for health check or
@@ -996,6 +1002,8 @@ private:
   Buffer::BufferMemoryAccountSharedPtr account_;
   const bool proxy_100_continue_;
 
+  std::vector<UpstreamCallback> decoder_filter_upstream_cbs_{};
+
   std::list<ActiveStreamDecoderFilterPtr> decoder_filters_;
   std::list<ActiveStreamEncoderFilterPtr> encoder_filters_;
   std::list<StreamFilterBase*> filters_;
diff --git a/source/common/router/upstream_request.cc b/source/common/router/upstream_request.cc
index 630465d000..e9a8c7601e 100644
--- a/source/common/router/upstream_request.cc
+++ b/source/common/router/upstream_request.cc
@@ -663,6 +663,20 @@ void UpstreamRequest::onPoolReady(std::unique_ptr<GenericUpstream>&& upstream,
     upstreamLog(AccessLog::AccessLogType::UpstreamPoolReady);
   }
 
+  bool accepted = parent_.callbacks()->iterateUpstreamCallbacks(*parent_.downstreamHeaders(),
+                                                                stream_info_);
+  if (!accepted) {
+    stream_info_.setResponseFlag(StreamInfo::ResponseFlag::UnauthorizedExternalService);
+    parent_.callbacks()->sendLocalReply(Http::Code::Forbidden, "Access denied\r\n",
+                                        nullptr, absl::nullopt, absl::string_view());
+    return;
+  }
+
+  for (auto* callback : upstream_callbacks_) {
+    callback->onUpstreamConnectionEstablished();
+    return;
+  }
+
   if (address_provider.connectionID() && stream_info_.downstreamAddressProvider().connectionID()) {
     ENVOY_LOG(debug, "Attached upstream connection [C{}] to downstream connection [C{}]",
               address_provider.connectionID().value(),
-- 
2.41.0

