From f8131a12fc6b00b9516c06483c4c5347ab46072e Mon Sep 17 00:00:00 2001
From: Jarno Rajahalme <jarno@isovalent.com>
Date: Fri, 21 Jan 2022 15:42:00 +0200
Subject: [PATCH 2/6] upstream: Add callback for upstream authorization

Add new StreamDecoderFilterCallbacks addUpstreamCallback() and
iterateUpstreamCallbacks(). Decoder filters can add callbacks using
addUpstreamCallback(), which will then get called after an upstream
connection has been established and all header transformations have been
performed, and just before upstream headers are encoded by the
router. If any of the callbacks returns 'false', the router will issue
a 403 local response instead of encoding the request upstream.

This allows HTTP decoder filters to perform policy enforcement on the
upstream requests taking effect after all potential header
transformations have been performed.

Callbacks can safely refer to memory held by the filter instance
adding the callback, as the calls to the callbacks are only ever be
done from the router filter in the same filter chain.

Signed-off-by: Jarno Rajahalme <jarno@isovalent.com>
---
 envoy/http/filter.h                      | 29 ++++++++++++++++++++++++
 source/common/http/async_client_impl.h   |  5 ++++
 source/common/http/filter_manager.cc     | 21 +++++++++++++++++
 source/common/http/filter_manager.h      |  8 +++++++
 source/common/router/upstream_request.cc | 10 ++++++++
 5 files changed, 73 insertions(+)

diff --git a/envoy/http/filter.h b/envoy/http/filter.h
index fe2494284d..faa3a71a03 100644
--- a/envoy/http/filter.h
+++ b/envoy/http/filter.h
@@ -335,6 +335,23 @@ public:
 using RouteConfigUpdatedCallback = std::function<void(bool)>;
 using RouteConfigUpdatedCallbackSharedPtr = std::shared_ptr<RouteConfigUpdatedCallback>;
 
+/**
+ * UpstreamCallback can be used to reject upstream host selection made by the router.
+ * This callback is passed the StreamInfo, and the final headers that can be used by
+ * the callback to inform its decision.
+ *
+ * The callback is called right befere the request is encoded on the already connected
+ * upstream connection. At this stage all header manipulations in the Envoy configuration
+ * have been performed so that the callback may inspect the final headers.
+ * 
+ * UpstreamCallback may not be called if a local reply is issued instead or forwarding
+ * the request.
+ *
+ * Returning 'true' allows the request to be forwarded. Returning 'false' prevents the
+ * request from being forwarded, and a 403 local response is issued instead.
+ */
+using UpstreamCallback = std::function<bool(Http::RequestHeaderMap&, StreamInfo::StreamInfo&)>;
+
 /**
  * Stream decoder filter callbacks add additional callbacks that allow a decoding filter to restart
  * decoding if they decide to hold data (e.g. for buffering or rate limiting).
@@ -647,6 +664,18 @@ public:
    */
   virtual bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr,
                                         StreamInfo::StreamInfo&) PURE;
+
+  /*
+   * Adds the given callback to be executed later via 
+   */
+  virtual void addUpstreamCallback(const UpstreamCallback& cb) PURE;
+
+  /**
+   * Invokes all the added callbacks before forwarding requests from this stream upstream.
+   * Returns 'false' if any of the callbacks rejects the request, 'true' otherwise.
+   */
+  virtual bool iterateUpstreamCallbacks(Http::RequestHeaderMap&,
+                                        StreamInfo::StreamInfo&) PURE;
 };
 
 /**
diff --git a/source/common/http/async_client_impl.h b/source/common/http/async_client_impl.h
index 4d83b5a747..6fd27ffa0a 100644
--- a/source/common/http/async_client_impl.h
+++ b/source/common/http/async_client_impl.h
@@ -348,6 +348,11 @@ private:
                                 StreamInfo::StreamInfo&) override {
     return true;
   }
+  void addUpstreamCallback(const UpstreamCallback&) override {}
+  bool iterateUpstreamCallbacks(Http::RequestHeaderMap&,
+                                StreamInfo::StreamInfo&) override {
+    return true;
+  }
   Router::RouteConstSharedPtr route() override { return route_; }
   Router::RouteConstSharedPtr route(const Router::RouteCallback&) override { return nullptr; }
   void setRoute(Router::RouteConstSharedPtr) override {}
diff --git a/source/common/http/filter_manager.cc b/source/common/http/filter_manager.cc
index 4c59d0d9ef..40700256a0 100644
--- a/source/common/http/filter_manager.cc
+++ b/source/common/http/filter_manager.cc
@@ -1377,10 +1377,31 @@ bool FilterManager::createFilterChain() {
   return !upgrade_rejected;
 }
 
+void FilterManager::addUpstreamCallback(const UpstreamCallback& cb) {
+  decoder_filter_upstream_cbs_.emplace_back(cb);
+}
+  
+bool FilterManager::iterateUpstreamCallbacks(Http::RequestHeaderMap& headers,
+                                             StreamInfo::StreamInfo& upstream_info) {
+  bool accept = true;
+  for (const auto& cb : decoder_filter_upstream_cbs_) {
+    accept = accept && cb(headers, upstream_info);
+  }
+  return accept;
+}
+
 bool ActiveStreamDecoderFilter::iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr host,
                                                          StreamInfo::StreamInfo& stream_info) {
   return parent_.filter_manager_callbacks_.iterateUpstreamCallbacks(host, stream_info);
+}
+
+void ActiveStreamDecoderFilter::addUpstreamCallback(const UpstreamCallback& cb) {
+  parent_.addUpstreamCallback(cb);
+}
 
+bool ActiveStreamDecoderFilter::iterateUpstreamCallbacks(Http::RequestHeaderMap& headers,
+                                                         StreamInfo::StreamInfo& stream_info) {
+  return parent_.iterateUpstreamCallbacks(headers, stream_info);
 }
 
 void ActiveStreamDecoderFilter::requestDataDrained() {
diff --git a/source/common/http/filter_manager.h b/source/common/http/filter_manager.h
index df33d8fcdd..dd0c8ca07c 100644
--- a/source/common/http/filter_manager.h
+++ b/source/common/http/filter_manager.h
@@ -252,6 +252,9 @@ struct ActiveStreamDecoderFilter : public ActiveStreamFilterBase,
 
   bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr host,
                                 StreamInfo::StreamInfo& stream_info) override;
+  void addUpstreamCallback(const UpstreamCallback& cb) override;
+  bool iterateUpstreamCallbacks(Http::RequestHeaderMap& headers,
+                                StreamInfo::StreamInfo& stream_info) override;
 
   StreamDecoderFilterSharedPtr handle_;
   bool is_grpc_request_{};
@@ -966,6 +969,9 @@ private:
     return request_metadata_map_vector_.get();
   }
 
+  void addUpstreamCallback(const UpstreamCallback&);
+  bool iterateUpstreamCallbacks(Http::RequestHeaderMap&, StreamInfo::StreamInfo&);
+
   FilterManagerCallbacks& filter_manager_callbacks_;
   Event::Dispatcher& dispatcher_;
   const Network::Connection& connection_;
@@ -973,6 +979,8 @@ private:
   Buffer::BufferMemoryAccountSharedPtr account_;
   const bool proxy_100_continue_;
 
+  std::vector<UpstreamCallback> decoder_filter_upstream_cbs_{};
+
   std::list<ActiveStreamDecoderFilterPtr> decoder_filters_;
   std::list<ActiveStreamEncoderFilterPtr> encoder_filters_;
   std::list<StreamFilterBase*> filters_;
diff --git a/source/common/router/upstream_request.cc b/source/common/router/upstream_request.cc
index 4d460e6e20..b57dccbbc7 100644
--- a/source/common/router/upstream_request.cc
+++ b/source/common/router/upstream_request.cc
@@ -536,6 +536,16 @@ void UpstreamRequest::onPoolReady(
     max_stream_duration_timer_->enableTimer(*max_stream_duration);
   }
 
+  bool accepted = parent_.callbacks()->iterateUpstreamCallbacks(*parent_.downstreamHeaders(),
+                                                                stream_info_);
+  if (!accepted) {
+    calling_encode_headers_ = false;
+    stream_info_.setResponseFlag(StreamInfo::ResponseFlag::UnauthorizedExternalService);
+    parent_.callbacks()->sendLocalReply(Http::Code::Forbidden, "Access denied\r\n",
+                                        nullptr, absl::nullopt, absl::string_view());
+    return;
+  }
+  
   const Http::Status status =
       upstream_->encodeHeaders(*parent_.downstreamHeaders(), shouldSendEndStream());
   calling_encode_headers_ = false;
-- 
2.39.2

