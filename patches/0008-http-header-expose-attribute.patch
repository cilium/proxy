From 024de602cae722d7f738c31d3b69fb99042ddb41 Mon Sep 17 00:00:00 2001
From: Tam Mach <sayboras@yahoo.com>
Date: Wed, 19 Mar 2025 21:07:05 +1100
Subject: [PATCH] Expose HTTP Header matcher attribute

Signed-off-by: Tam Mach <sayboras@yahoo.com>
---
 source/common/http/header_utility.h | 26 +++++++++++++-------------
 1 file changed, 13 insertions(+), 13 deletions(-)

diff --git a/source/common/http/header_utility.h b/source/common/http/header_utility.h
index 3ca4ce2b14..9b1fe0201d 100644
--- a/source/common/http/header_utility.h
+++ b/source/common/http/header_utility.h
@@ -92,7 +92,6 @@ public:
       return present_ != invert_match_;
     };

-  private:
     const LowerCaseString name_;
     const bool invert_match_;
     const bool treat_missing_as_empty_;
@@ -124,13 +123,13 @@ public:
       // Execute the specific matcher's code and invert if invert_match_ is set.
       return specificMatchesHeaders(value) != invert_match_;
     };
+    const LowerCaseString name_;
+    const bool invert_match_;
+    const bool treat_missing_as_empty_;

   protected:
     // A matcher specific implementation to match the given header_value.
     virtual bool specificMatchesHeaders(absl::string_view header_value) const PURE;
-    const LowerCaseString name_;
-    const bool invert_match_;
-    const bool treat_missing_as_empty_;
   };

   // Corresponds to the exact_match from the HeaderMatchSpecifier proto in the RDS API.
@@ -139,11 +138,12 @@ public:
     HeaderDataExactMatch(const envoy::config::route::v3::HeaderMatcher& config)
         : HeaderDataBaseImpl(config), expected_value_(config.exact_match()) {}

+    const std::string expected_value_;
+
   private:
     bool specificMatchesHeaders(absl::string_view header_value) const override {
       return expected_value_.empty() || header_value == expected_value_;
     };
-    const std::string expected_value_;
   };

   // Corresponds to the safe_regex_match from the HeaderMatchSpecifier proto in the RDS API.
@@ -158,6 +158,7 @@ public:
       return std::unique_ptr<HeaderDataRegexMatch>(
           new HeaderDataRegexMatch(config, std::move(*regex_or_error)));
     }
+    const Regex::CompiledMatcherPtr regex_;

   protected:
     HeaderDataRegexMatch(const envoy::config::route::v3::HeaderMatcher& config,
@@ -168,7 +169,6 @@ public:
     bool specificMatchesHeaders(absl::string_view header_value) const override {
       return regex_->match(header_value);
     };
-    const Regex::CompiledMatcherPtr regex_;
   };

   // Corresponds to the range_match from the HeaderMatchSpecifier proto in the RDS API.
@@ -177,6 +177,8 @@ public:
     HeaderDataRangeMatch(const envoy::config::route::v3::HeaderMatcher& config)
         : HeaderDataBaseImpl(config), range_start_(config.range_match().start()),
           range_end_(config.range_match().end()) {}
+    const int64_t range_start_;
+    const int64_t range_end_;

   private:
     bool specificMatchesHeaders(absl::string_view header_value) const override {
@@ -184,9 +186,6 @@ public:
       return absl::SimpleAtoi(header_value, &header_int_value) &&
              header_int_value >= range_start_ && header_int_value < range_end_;
     };
-
-    const int64_t range_start_;
-    const int64_t range_end_;
   };

   // Corresponds to the prefix_match from the HeaderMatchSpecifier proto in the RDS API.
@@ -194,12 +193,12 @@ public:
   public:
     HeaderDataPrefixMatch(const envoy::config::route::v3::HeaderMatcher& config)
         : HeaderDataBaseImpl(config), prefix_(config.prefix_match()) {}
+    const std::string prefix_;

   private:
     bool specificMatchesHeaders(absl::string_view header_value) const override {
       return absl::StartsWith(header_value, prefix_);
     };
-    const std::string prefix_;
   };

   // Corresponds to the suffix_match from the HeaderMatchSpecifier proto in the RDS API.
@@ -208,11 +207,12 @@ public:
     HeaderDataSuffixMatch(const envoy::config::route::v3::HeaderMatcher& config)
         : HeaderDataBaseImpl(config), suffix_(config.suffix_match()) {}

+    const std::string suffix_;
+
   private:
     bool specificMatchesHeaders(absl::string_view header_value) const override {
       return absl::EndsWith(header_value, suffix_);
     };
-    const std::string suffix_;
   };

   // Corresponds to the contains_match from the HeaderMatchSpecifier proto in the RDS API.
@@ -220,12 +220,12 @@ public:
   public:
     HeaderDataContainsMatch(const envoy::config::route::v3::HeaderMatcher& config)
         : HeaderDataBaseImpl(config), expected_substr_(config.contains_match()) {}
+    const std::string expected_substr_;

   private:
     bool specificMatchesHeaders(absl::string_view header_value) const override {
       return absl::StrContains(header_value, expected_substr_);
     };
-    const std::string expected_substr_;
   };

   // Corresponds to the string_match from the HeaderMatchSpecifier proto in the RDS API.
@@ -237,12 +237,12 @@ public:
           string_match_(std::make_unique<
                         Matchers::StringMatcherImpl<envoy::type::matcher::v3::StringMatcher>>(
               config.string_match(), factory_context)) {}
+    const Matchers::StringMatcherPtr string_match_;

   private:
     bool specificMatchesHeaders(absl::string_view header_value) const override {
       return string_match_->match(header_value);
     };
-    const Matchers::StringMatcherPtr string_match_;
   };

   using HeaderDataPtr = std::unique_ptr<HeaderMatcher>;
--
2.34.1

