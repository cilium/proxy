From e3a0af1adfbab03546bba14e8a74549fe253bf75 Mon Sep 17 00:00:00 2001
From: Jarno Rajahalme <jarno@isovalent.com>
Date: Fri, 21 Jan 2022 15:42:00 +0200
Subject: [PATCH 04/11] upstream: Add callback for upstream authorization

Add new StreamDecoderFilterCallbacks addUpstreamCallback() and
iterateUpstreamCallbacks(). Decoder filters can add callbacks using
addUpstreamCallback(), which will then get called after an upstream
connection has been established and all header transformations have been
performed, and just before upstream headers are encoded by the
router. If any of the callbacks returns 'false', the router will issue
a 403 local response instead of encoding the request upstream.

This allows HTTP decoder filters to perform policy enforcement on the
upstream requests taking effect after all potential header
transformations have been performed.

Callbacks can safely refer to memory held by the filter instance
adding the callback, as the calls to the callbacks are only ever be
done from the router filter in the same filter chain.

Signed-off-by: Jarno Rajahalme <jarno@isovalent.com>
---
 envoy/http/filter.h                      | 29 ++++++++++++++++++++++++
 source/common/http/async_client_impl.h   |  5 ++++
 source/common/http/filter_manager.cc     | 21 +++++++++++++++++
 source/common/http/filter_manager.h      |  8 +++++++
 source/common/router/upstream_request.cc | 10 ++++++++
 5 files changed, 73 insertions(+)

diff --git a/envoy/http/filter.h b/envoy/http/filter.h
index d67178857e..8f88ef0292 100644
--- a/envoy/http/filter.h
+++ b/envoy/http/filter.h
@@ -320,6 +320,23 @@ public:
 using RouteConfigUpdatedCallback = std::function<void(bool)>;
 using RouteConfigUpdatedCallbackSharedPtr = std::shared_ptr<RouteConfigUpdatedCallback>;
 
+/**
+ * UpstreamCallback can be used to reject upstream host selection made by the router.
+ * This callback is passed the StreamInfo, and the final headers that can be used by
+ * the callback to inform its decision.
+ *
+ * The callback is called right befere the request is encoded on the already connected
+ * upstream connection. At this stage all header manipulations in the Envoy configuration
+ * have been performed so that the callback may inspect the final headers.
+ * 
+ * UpstreamCallback may not be called if a local reply is issued instead or forwarding
+ * the request.
+ *
+ * Returning 'true' allows the request to be forwarded. Returning 'false' prevents the
+ * request from being forwarded, and a 403 local response is issued instead.
+ */
+using UpstreamCallback = std::function<bool(Http::RequestHeaderMap&, StreamInfo::StreamInfo&)>;
+
 /**
  * Stream decoder filter callbacks add additional callbacks that allow a decoding filter to restart
  * decoding if they decide to hold data (e.g. for buffering or rate limiting).
@@ -632,6 +649,18 @@ public:
    */
   virtual bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr,
                                         StreamInfo::StreamInfo&) PURE;
+
+  /*
+   * Adds the given callback to be executed later via 
+   */
+  virtual void addUpstreamCallback(const UpstreamCallback& cb) PURE;
+
+  /**
+   * Invokes all the added callbacks before forwarding requests from this stream upstream.
+   * Returns 'false' if any of the callbacks rejects the request, 'true' otherwise.
+   */
+  virtual bool iterateUpstreamCallbacks(Http::RequestHeaderMap&,
+                                        StreamInfo::StreamInfo&) PURE;
 };
 
 /**
diff --git a/source/common/http/async_client_impl.h b/source/common/http/async_client_impl.h
index 5ee3d555b7..f8e7f96319 100644
--- a/source/common/http/async_client_impl.h
+++ b/source/common/http/async_client_impl.h
@@ -339,6 +339,11 @@ private:
                                 StreamInfo::StreamInfo&) override {
     return true;
   }
+  void addUpstreamCallback(const UpstreamCallback&) override {}
+  bool iterateUpstreamCallbacks(Http::RequestHeaderMap&,
+                                StreamInfo::StreamInfo&) override {
+    return true;
+  }
   Router::RouteConstSharedPtr route() override { return route_; }
   Router::RouteConstSharedPtr route(const Router::RouteCallback&) override { return nullptr; }
   void setRoute(Router::RouteConstSharedPtr) override {}
diff --git a/source/common/http/filter_manager.cc b/source/common/http/filter_manager.cc
index ac3acb4257..d6a264e2dc 100644
--- a/source/common/http/filter_manager.cc
+++ b/source/common/http/filter_manager.cc
@@ -1459,10 +1459,31 @@ bool FilterManager::createFilterChain() {
   return !upgrade_rejected;
 }
 
+void FilterManager::addUpstreamCallback(const UpstreamCallback& cb) {
+  decoder_filter_upstream_cbs_.emplace_back(cb);
+}
+  
+bool FilterManager::iterateUpstreamCallbacks(Http::RequestHeaderMap& headers,
+                                             StreamInfo::StreamInfo& upstream_info) {
+  bool accept = true;
+  for (const auto& cb : decoder_filter_upstream_cbs_) {
+    accept = accept && cb(headers, upstream_info);
+  }
+  return accept;
+}
+
 bool ActiveStreamDecoderFilter::iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr host,
                                                          StreamInfo::StreamInfo& stream_info) {
   return parent_.filter_manager_callbacks_.iterateUpstreamCallbacks(host, stream_info);
+}
+
+void ActiveStreamDecoderFilter::addUpstreamCallback(const UpstreamCallback& cb) {
+  parent_.addUpstreamCallback(cb);
+}
 
+bool ActiveStreamDecoderFilter::iterateUpstreamCallbacks(Http::RequestHeaderMap& headers,
+                                                         StreamInfo::StreamInfo& stream_info) {
+  return parent_.iterateUpstreamCallbacks(headers, stream_info);
 }
 
 void ActiveStreamDecoderFilter::requestDataDrained() {
diff --git a/source/common/http/filter_manager.h b/source/common/http/filter_manager.h
index 14e8ef4603..84bc0db2f1 100644
--- a/source/common/http/filter_manager.h
+++ b/source/common/http/filter_manager.h
@@ -302,6 +302,9 @@ struct ActiveStreamDecoderFilter : public ActiveStreamFilterBase,
 
   bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr host,
                                 StreamInfo::StreamInfo& stream_info) override;
+  void addUpstreamCallback(const UpstreamCallback& cb) override;
+  bool iterateUpstreamCallbacks(Http::RequestHeaderMap& headers,
+                                StreamInfo::StreamInfo& stream_info) override;
 
   StreamDecoderFilterSharedPtr handle_;
   bool is_grpc_request_{};
@@ -1012,6 +1015,9 @@ private:
     return request_metadata_map_vector_.get();
   }
 
+  void addUpstreamCallback(const UpstreamCallback&);
+  bool iterateUpstreamCallbacks(Http::RequestHeaderMap&, StreamInfo::StreamInfo&);
+
   FilterManagerCallbacks& filter_manager_callbacks_;
   Event::Dispatcher& dispatcher_;
   const Network::Connection& connection_;
@@ -1019,6 +1025,8 @@ private:
   Buffer::BufferMemoryAccountSharedPtr account_;
   const bool proxy_100_continue_;
 
+  std::vector<UpstreamCallback> decoder_filter_upstream_cbs_{};
+
   std::list<ActiveStreamDecoderFilterPtr> decoder_filters_;
   std::list<ActiveStreamEncoderFilterPtr> encoder_filters_;
   std::list<StreamFilterBase*> filters_;
diff --git a/source/common/router/upstream_request.cc b/source/common/router/upstream_request.cc
index c336eaffaf..cfbf6e06d6 100644
--- a/source/common/router/upstream_request.cc
+++ b/source/common/router/upstream_request.cc
@@ -516,6 +516,16 @@ void UpstreamRequest::onPoolReady(
     max_stream_duration_timer_->enableTimer(*max_stream_duration);
   }
 
+  bool accepted = parent_.callbacks()->iterateUpstreamCallbacks(*parent_.downstreamHeaders(),
+                                                                stream_info_);
+  if (!accepted) {
+    calling_encode_headers_ = false;
+    stream_info_.setResponseFlag(StreamInfo::ResponseFlag::UnauthorizedExternalService);
+    parent_.callbacks()->sendLocalReply(Http::Code::Forbidden, "Access denied\r\n",
+                                        nullptr, absl::nullopt, absl::string_view());
+    return;
+  }
+  
   const Http::Status status =
       upstream_->encodeHeaders(*parent_.downstreamHeaders(), shouldSendEndStream());
   calling_encode_headers_ = false;
-- 
2.36.0

