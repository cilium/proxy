From b13c64877b55c1a645d3b6b1d18a566930ef519c Mon Sep 17 00:00:00 2001
From: Jarno Rajahalme <jarno@isovalent.com>
Date: Mon, 23 Dec 2024 22:43:15 +0100
Subject: [PATCH 8/8] thread_local: reset slot in worker threads first

Thread local slots refer to their data via shared pointers. Reset the
shared pointer first in the worker threads, and last in the main thread
so that the referred object is destructed in the main thread instead of
some random worker thread. This prevents xDS stream synchronization bugs
if the slot happens to refer to an SDS secret.

Signed-off-by: Jarno Rajahalme <jarno@isovalent.com>
---
 envoy/thread_local/thread_local.h             |  7 +++++
 .../common/thread_local/thread_local_impl.cc  | 26 +++++++++++++++++--
 .../common/thread_local/thread_local_impl.h   |  1 +
 test/mocks/thread_local/mocks.h               |  4 +++
 4 files changed, 36 insertions(+), 2 deletions(-)

diff --git a/envoy/thread_local/thread_local.h b/envoy/thread_local/thread_local.h
index 13ff7496ff..da982ccea5 100644
--- a/envoy/thread_local/thread_local.h
+++ b/envoy/thread_local/thread_local.h
@@ -248,6 +248,13 @@ public:
    * @return true if global threading has been shutdown or false if not.
    */
   virtual bool isShutdown() const PURE;
+
+  /**
+   * Run 'worker_cb' in all worker threads, and 'main_cb' in the main thread after all worker
+   * threads have executed.
+   */
+  virtual void runOnAllWorkerThreads(std::function<void()> worker_cb, std::function<void()> main_cb) const PURE;
+
 };
 
 } // namespace ThreadLocal
diff --git a/source/common/thread_local/thread_local_impl.cc b/source/common/thread_local/thread_local_impl.cc
index bd417164b1..ba3e98ab8c 100644
--- a/source/common/thread_local/thread_local_impl.cc
+++ b/source/common/thread_local/thread_local_impl.cc
@@ -177,7 +177,8 @@ void InstanceImpl::removeSlot(uint32_t slot) {
              free_slot_indexes_.end(),
          fmt::format("slot index {} already in free slot set!", slot));
   free_slot_indexes_.push_back(slot);
-  runOnAllThreads([slot]() -> void {
+
+  auto cb = [slot]() -> void {
     // This runs on each thread and clears the slot, making it available for a new allocations.
     // This is safe even if a new allocation comes in, because everything happens with post() and
     // will be sequenced after this removal. It is also safe if there are callbacks pending on
@@ -185,7 +186,12 @@ void InstanceImpl::removeSlot(uint32_t slot) {
     if (slot < thread_local_data_.data_.size()) {
       thread_local_data_.data_[slot] = nullptr;
     }
-  });
+  };
+  // 'cb' is called in the main thread after it has been called on all worker threads.
+  // This makes sure the last shared pointer reference is released in the main thread,
+  // so that the thread local data is destructed in the main thread instead of some random
+  // worker thread.
+  runOnAllWorkerThreads(cb, cb);
 }
 
 void InstanceImpl::runOnAllThreads(std::function<void()> cb) {
@@ -220,6 +226,22 @@ void InstanceImpl::runOnAllThreads(std::function<void()> cb,
   }
 }
 
+void InstanceImpl::runOnAllWorkerThreads(std::function<void()> cb,
+                                         std::function<void()> worker_threads_complete_cb) const {
+  ASSERT_IS_MAIN_OR_TEST_THREAD();
+  ASSERT(!shutdown_);
+
+  std::shared_ptr<std::function<void()>> cb_guard(
+      new std::function<void()>(cb), [this, worker_threads_complete_cb](std::function<void()>* cb) {
+        main_thread_dispatcher_->post(worker_threads_complete_cb);
+        delete cb;
+      });
+
+  for (Event::Dispatcher& dispatcher : registered_threads_) {
+    dispatcher.post([cb_guard]() -> void { (*cb_guard)(); });
+  }
+}
+
 void InstanceImpl::setThreadLocal(uint32_t index, ThreadLocalObjectSharedPtr object) {
   if (thread_local_data_.data_.size() <= index) {
     thread_local_data_.data_.resize(index + 1);
diff --git a/source/common/thread_local/thread_local_impl.h b/source/common/thread_local/thread_local_impl.h
index 90753101b6..bb87b9b502 100644
--- a/source/common/thread_local/thread_local_impl.h
+++ b/source/common/thread_local/thread_local_impl.h
@@ -29,6 +29,7 @@ public:
   void shutdownThread() override;
   Event::Dispatcher& dispatcher() override;
   bool isShutdown() const override { return shutdown_; }
+  void runOnAllWorkerThreads(std::function<void()> worker_cb, std::function<void()> main_cb) const override;
 
 private:
   // On destruction returns the slot index to the deferred delete queue (detaches it). This allows
diff --git a/test/mocks/thread_local/mocks.h b/test/mocks/thread_local/mocks.h
index 09dff23777..88d7cea1a9 100644
--- a/test/mocks/thread_local/mocks.h
+++ b/test/mocks/thread_local/mocks.h
@@ -27,6 +27,10 @@ public:
   MOCK_METHOD(void, shutdownThread, ());
   MOCK_METHOD(Event::Dispatcher&, dispatcher, ());
   bool isShutdown() const override { return shutdown_; }
+  void runOnAllWorkerThreads(std::function<void()> worker_cb, std::function<void()> main_cb) const override {
+    worker_cb();
+    main_cb();
+  }
 
   SlotPtr allocateSlotMock() { return SlotPtr{new SlotImpl(*this, current_slot_++)}; }
   void runOnAllThreads1(std::function<void()> cb) { cb(); }
-- 
2.47.1

