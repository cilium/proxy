From 288aadfe6637897f00730f8269105b7efef91dc2 Mon Sep 17 00:00:00 2001
From: Jarno Rajahalme <jarno@isovalent.com>
Date: Sun, 26 Feb 2023 22:41:24 +0200
Subject: [PATCH 5/6] router: Do not set SNI or SAN due to auto_sni or auto_san
 if already set

Do not set SNI or SAN metadata in router filter based on auto_sni or
auto_san_validation config if the corresponding metadata is already
set. This allows upstream filters set the SNI and/or SAN metadata,
e.g. based on the downstream TLS connection, without router filter
causing an ENVOY_BUG due to this metadata being already set on a higher
lifespan level (e.g., Connection).

Signed-off-by: Jarno Rajahalme <jarno@isovalent.com>
---
 source/common/router/router.cc    |  8 +++-
 test/common/router/router_test.cc | 66 ++++++++++++++++++++++---------
 2 files changed, 54 insertions(+), 20 deletions(-)

diff --git a/source/common/router/router.cc b/source/common/router/router.cc
index fccf07c171..b1fa51649e 100644
--- a/source/common/router/router.cc
+++ b/source/common/router/router.cc
@@ -540,14 +540,18 @@ Http::FilterHeadersStatus Filter::decodeHeaders(Http::RequestHeaderMap& headers,
     // `host_` returns a string_view so doing this should be safe.
     absl::string_view sni_value = parsed_authority.host_;
 
-    if (should_set_sni && upstream_http_protocol_options.value().auto_sni()) {
+    if (should_set_sni && upstream_http_protocol_options.value().auto_sni() &&
+        !callbacks_->streamInfo().filterState()->hasDataWithName(
+            Network::UpstreamServerName::key())) {
       callbacks_->streamInfo().filterState()->setData(
           Network::UpstreamServerName::key(),
           std::make_unique<Network::UpstreamServerName>(sni_value),
           StreamInfo::FilterState::StateType::Mutable);
     }
 
-    if (upstream_http_protocol_options.value().auto_san_validation()) {
+    if (upstream_http_protocol_options.value().auto_san_validation() &&
+        !callbacks_->streamInfo().filterState()->hasDataWithName(
+            Network::UpstreamSubjectAltNames::key())) {
       callbacks_->streamInfo().filterState()->setData(
           Network::UpstreamSubjectAltNames::key(),
           std::make_unique<Network::UpstreamSubjectAltNames>(
diff --git a/test/common/router/router_test.cc b/test/common/router/router_test.cc
index f10e4e4865..49f79251e5 100644
--- a/test/common/router/router_test.cc
+++ b/test/common/router/router_test.cc
@@ -161,10 +161,15 @@ public:
     router_.onDestroy();
   }
 
+  // testAutoSniOptions checks that UpstreamServerName is server_name if non-empty,
+  // and that the first UpstreamSubjectAltNames is alt_server_name if non-empty.
+  // UpstreamServerName is pre-set to pre_set_sni if non-empty.
   void testAutoSniOptions(
       absl::optional<envoy::config::core::v3::UpstreamHttpProtocolOptions> dummy_option,
-      Envoy::Http::TestRequestHeaderMapImpl headers, std::string server_name = "host",
-      bool should_validate_san = false, std::string alt_server_name = "host") {
+      Envoy::Http::TestRequestHeaderMapImpl headers, std::string server_name = "",
+      std::string alt_server_name = "", std::string pre_set_sni = "",
+      StreamInfo::FilterState::LifeSpan pre_set_life_span =
+          StreamInfo::FilterState::LifeSpan::FilterChain) {
     NiceMock<StreamInfo::MockStreamInfo> stream_info;
     ON_CALL(*cm_.thread_local_cluster_.cluster_.info_, upstreamHttpProtocolOptions())
         .WillByDefault(ReturnRef(dummy_option));
@@ -172,18 +177,26 @@ public:
         .WillByDefault(ReturnRef(stream_info.filterState()));
     EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_, newStream(_, _, _))
         .WillOnce(Return(&cancellable_));
-    stream_info.filterState()->setData(Network::UpstreamServerName::key(),
-                                       std::make_unique<Network::UpstreamServerName>("dummy"),
-                                       StreamInfo::FilterState::StateType::Mutable);
+
+    if (!pre_set_sni.empty()) {
+      // Simulate a network filter setting the server name, e.g. based on SNI seen by the
+      // tls_inspector by using the LifeSpan::Connection
+      stream_info.filterState()->setData(Network::UpstreamServerName::key(),
+                                         std::make_unique<Network::UpstreamServerName>(pre_set_sni),
+                                         StreamInfo::FilterState::StateType::Mutable,
+                                         pre_set_life_span);
+    }
     expectResponseTimerCreate();
 
     HttpTestUtility::addDefaultHeaders(headers);
     router_.decodeHeaders(headers, true);
-    EXPECT_EQ(server_name,
-              stream_info.filterState()
-                  ->getDataReadOnly<Network::UpstreamServerName>(Network::UpstreamServerName::key())
-                  ->value());
-    if (should_validate_san) {
+    if (!server_name.empty()) {
+      EXPECT_EQ(server_name, stream_info.filterState()
+                                 ->getDataReadOnly<Network::UpstreamServerName>(
+                                     Network::UpstreamServerName::key())
+                                 ->value());
+    }
+    if (!alt_server_name.empty()) {
       EXPECT_EQ(alt_server_name, stream_info.filterState()
                                      ->getDataReadOnly<Network::UpstreamSubjectAltNames>(
                                          Network::UpstreamSubjectAltNames::key())
@@ -204,7 +217,24 @@ TEST_F(RouterTest, UpdateServerNameFilterStateWithoutHeaderOverride) {
   dummy_option.value().set_auto_sni(true);
 
   Http::TestRequestHeaderMapImpl headers{};
-  testAutoSniOptions(dummy_option, headers);
+  testAutoSniOptions(dummy_option, headers, "host");
+}
+
+TEST_F(RouterTest, DontUpdateServerNameFilterStateWhenExists) {
+  auto dummy_option = absl::make_optional<envoy::config::core::v3::UpstreamHttpProtocolOptions>();
+  dummy_option.value().set_auto_sni(true);
+
+  Http::TestRequestHeaderMapImpl headers{};
+  testAutoSniOptions(dummy_option, headers, "old-host", "", "old-host");
+}
+
+TEST_F(RouterTest, DontUpdateServerNameFilterStateWhenExistsConnectionLifeSpan) {
+  auto dummy_option = absl::make_optional<envoy::config::core::v3::UpstreamHttpProtocolOptions>();
+  dummy_option.value().set_auto_sni(true);
+
+  Http::TestRequestHeaderMapImpl headers{};
+  testAutoSniOptions(dummy_option, headers, "old-host", "", "old-host",
+                     StreamInfo::FilterState::LifeSpan::Connection);
 }
 
 TEST_F(RouterTest, UpdateServerNameFilterStateWithHostHeaderOverride) {
@@ -213,7 +243,7 @@ TEST_F(RouterTest, UpdateServerNameFilterStateWithHostHeaderOverride) {
   dummy_option.value().set_override_auto_sni_header(":authority");
 
   Http::TestRequestHeaderMapImpl headers{};
-  testAutoSniOptions(dummy_option, headers);
+  testAutoSniOptions(dummy_option, headers, "host");
 }
 
 TEST_F(RouterTest, UpdateServerNameFilterStateWithHeaderOverride) {
@@ -232,7 +262,7 @@ TEST_F(RouterTest, UpdateServerNameFilterStateWithEmptyValueHeaderOverride) {
   dummy_option.value().set_override_auto_sni_header("x-host");
 
   Http::TestRequestHeaderMapImpl headers{{"x-host", ""}};
-  testAutoSniOptions(dummy_option, headers);
+  testAutoSniOptions(dummy_option, headers, "host");
 }
 
 TEST_F(RouterTest, UpdateSubjectAltNamesFilterStateWithoutHeaderOverride) {
@@ -241,7 +271,7 @@ TEST_F(RouterTest, UpdateSubjectAltNamesFilterStateWithoutHeaderOverride) {
   dummy_option.value().set_auto_san_validation(true);
 
   Http::TestRequestHeaderMapImpl headers{};
-  testAutoSniOptions(dummy_option, headers, "host", true);
+  testAutoSniOptions(dummy_option, headers, "host", "host");
 }
 
 TEST_F(RouterTest, UpdateSubjectAltNamesFilterStateWithHostHeaderOverride) {
@@ -251,7 +281,7 @@ TEST_F(RouterTest, UpdateSubjectAltNamesFilterStateWithHostHeaderOverride) {
   dummy_option.value().set_override_auto_sni_header(":authority");
 
   Http::TestRequestHeaderMapImpl headers{};
-  testAutoSniOptions(dummy_option, headers, "host", true);
+  testAutoSniOptions(dummy_option, headers, "host", "host");
 }
 
 TEST_F(RouterTest, UpdateSubjectAltNamesFilterStateWithHeaderOverride) {
@@ -262,7 +292,7 @@ TEST_F(RouterTest, UpdateSubjectAltNamesFilterStateWithHeaderOverride) {
 
   const auto server_name = "foo.bar";
   Http::TestRequestHeaderMapImpl headers{{"x-host", server_name}};
-  testAutoSniOptions(dummy_option, headers, server_name, true, server_name);
+  testAutoSniOptions(dummy_option, headers, server_name, server_name);
 }
 
 TEST_F(RouterTest, UpdateSubjectAltNamesFilterStateWithEmptyValueHeaderOverride) {
@@ -272,7 +302,7 @@ TEST_F(RouterTest, UpdateSubjectAltNamesFilterStateWithEmptyValueHeaderOverride)
   dummy_option.value().set_override_auto_sni_header("x-host");
 
   Http::TestRequestHeaderMapImpl headers{{"x-host", ""}};
-  testAutoSniOptions(dummy_option, headers, "host", true);
+  testAutoSniOptions(dummy_option, headers, "host", "host");
 }
 
 TEST_F(RouterTest, UpdateSubjectAltNamesFilterStateWithIpHeaderOverride) {
@@ -283,7 +313,7 @@ TEST_F(RouterTest, UpdateSubjectAltNamesFilterStateWithIpHeaderOverride) {
 
   const auto server_name = "127.0.0.1";
   Http::TestRequestHeaderMapImpl headers{{"x-host", server_name}};
-  testAutoSniOptions(dummy_option, headers, "dummy", true, server_name);
+  testAutoSniOptions(dummy_option, headers, "", server_name);
 }
 
 TEST_F(RouterTest, RouteNotFound) {
-- 
2.39.2

