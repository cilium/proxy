From a940e129f8dfedd434961509de351a24bf68c29e Mon Sep 17 00:00:00 2001
From: Jarno Rajahalme <jarno@isovalent.com>
Date: Thu, 29 Feb 2024 13:21:20 +0100
Subject: [PATCH 4/6] factory_base: Backport "is_upstream"

Upstream commit 26a4eb87428dbf3a39ff4f6f61b69538c34d07b6 introduced
'is_upstream' field in 'DualInfo' that allows filter operation to know if
the filter is installed on upstream or downstream filter chain. Due to
the semantic differences between the upstream and downstream filter
execution this is generally needed for dual filter implementations.

Backport this change. This backport will become moot in a future Envoy
version bump with the upstream commit
26a4eb87428dbf3a39ff4f6f61b69538c34d07b6.

Signed-off-by: Jarno Rajahalme <jarno@isovalent.com>

diff --git a/source/extensions/filters/http/common/factory_base.h b/source/extensions/filters/http/common/factory_base.h
index ae0288c8e1..3773237ae8 100644
--- a/source/extensions/filters/http/common/factory_base.h
+++ b/source/extensions/filters/http/common/factory_base.h
@@ -127,11 +127,12 @@ public:
 
   struct DualInfo {
     DualInfo(Server::Configuration::UpstreamFactoryContext& context)
-        : init_manager(context.initManager()), scope(context.scope()) {}
+        : init_manager(context.initManager()), scope(context.scope()), is_upstream(true) {}
     DualInfo(Server::Configuration::FactoryContext& context)
-        : init_manager(context.initManager()), scope(context.scope()) {}
+        : init_manager(context.initManager()), scope(context.scope()), is_upstream(false) {}
     Init::Manager& init_manager;
     Stats::Scope& scope;
+    bool is_upstream;
   };
 
   absl::StatusOr<Envoy::Http::FilterFactoryCb>
-- 
2.45.0

