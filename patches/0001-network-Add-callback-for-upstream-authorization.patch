From 372e6203c5f1a999e9c410995ad57495cfe70d2d Mon Sep 17 00:00:00 2001
From: Jarno Rajahalme <jarno@isovalent.com>
Date: Mon, 24 Jan 2022 15:40:28 +0200
Subject: [PATCH 1/4] network: Add callback for upstream authorization

Add new ReadFilterCallbacks addUpstreamCallback() and
iterateUpstreamCallbacks(). Network filters can add callbacks using
addUpstreamCallback(), which will then get called after an upstream
host has been selected, but before the upstream connection is
established.  If any of the callbacks returns 'false', the connection
is not established. For HTTP the router will issue a 403 local
response.

iterateUpstreamCallbacks() is also added to
StreamDecoderFilterCallbacks so that the HTTP router filter can invoke
the added callbacks before a new connection is established.

These additions allow network read filters to perform network level
policy enforcement based on the selected upstream host.

Callbacks can safely refer to memory held by the filter instance
adding the callback, as the calls to the callbacks are only ever be
done from the tcp_proxy or router filter in the same filter chain.

Signed-off-by: Jarno Rajahalme <jarno@isovalent.com>

diff --git a/envoy/http/filter.h b/envoy/http/filter.h
index 361eacc244..88123f71b2 100644
--- a/envoy/http/filter.h
+++ b/envoy/http/filter.h
@@ -751,6 +751,14 @@ public:
    * load balancing.
    */
   virtual absl::optional<absl::string_view> upstreamOverrideHost() const PURE;
+
+  /**
+   * Invokes all the added network level callbacks before establishing a connection to the
+   * selected upstream host.
+   * Returns 'false' if any of the callbacks rejects the connection, 'true' otherwise.
+   */
+  virtual bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr,
+                                        StreamInfo::StreamInfo&) PURE;
 };
 
 /**
diff --git a/envoy/network/filter.h b/envoy/network/filter.h
index c1fa3a3b9e..4d1809fdc5 100644
--- a/envoy/network/filter.h
+++ b/envoy/network/filter.h
@@ -112,6 +112,22 @@ public:
 
 using WriteFilterSharedPtr = std::shared_ptr<WriteFilter>;
 
+/**
+ * UpstreamCallback can be used to reject upstream host selection made by the TCP proxy filter.
+ * This callback is passed the Upstream::HostDescriptionConstSharedPtr, and StreamInfo.
+ *
+ * The callback is called just after the upstream host has been picked, but before a connection is
+ * established. Here the callback can reject the selected upstream host and cause the be dropped.
+
+ * UpstreamCallback may not be called if the connection is dropped for another reason, such as
+ * no route, cluster is not found, etc.
+ *
+ * Returning 'true' allows the connection to be established. Returning 'false' prevents the
+ * connection to the selected host from being established.
+ */
+using UpstreamCallback = std::function<bool(Upstream::HostDescriptionConstSharedPtr,
+                                            StreamInfo::StreamInfo&)>;
+
 /**
  * Callbacks used by individual read filter instances to communicate with the filter manager.
  */
@@ -170,6 +186,18 @@ public:
    * mode to secure mode.
    */
   virtual bool startUpstreamSecureTransport() PURE;
+
+  /*
+   * Adds the given callback to be executed later via iterateUpstreamCallbacks().
+   */
+  virtual void addUpstreamCallback(const UpstreamCallback& cb) PURE;
+
+  /**
+   * Invokes all the added callbacks before connecting to the selected upstream host.
+   * Returns 'false' if any of the callbacks rejects the connection, 'true' otherwise.
+   */
+  virtual bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr,
+                                        StreamInfo::StreamInfo&) PURE;
 };
 
 /**
diff --git a/envoy/tcp/upstream.h b/envoy/tcp/upstream.h
index 200ec7fc9e..a1bf9b0542 100644
--- a/envoy/tcp/upstream.h
+++ b/envoy/tcp/upstream.h
@@ -66,6 +66,11 @@ public:
    * @param callbacks callbacks to communicate stream failure or creation on.
    */
   virtual void newStream(GenericConnectionPoolCallbacks& callbacks) PURE;
+
+  /**
+   * @return Upstream::HostDescriptionConstSharedPtr the host for which connections are pooled.
+   */
+  virtual Upstream::HostDescriptionConstSharedPtr host() const PURE;
 };
 
 // An API for the UpstreamRequest to get callbacks from either an HTTP or TCP
diff --git a/source/common/http/async_client_impl.h b/source/common/http/async_client_impl.h
index 83cee970b4..b55a169101 100644
--- a/source/common/http/async_client_impl.h
+++ b/source/common/http/async_client_impl.h
@@ -482,6 +482,10 @@ private:
   void setUpstreamOverrideHost(absl::string_view) override {}
   absl::optional<absl::string_view> upstreamOverrideHost() const override { return {}; }
   absl::string_view filterConfigName() const override { return ""; }
+  bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr,
+                                StreamInfo::StreamInfo&) override {
+    return true;
+  }
 
   // ScopeTrackedObject
   void dumpState(std::ostream& os, int indent_level) const override {
diff --git a/source/common/http/conn_manager_impl.h b/source/common/http/conn_manager_impl.h
index b82b1967a5..e55a1f803c 100644
--- a/source/common/http/conn_manager_impl.h
+++ b/source/common/http/conn_manager_impl.h
@@ -317,6 +317,12 @@ private:
     }
 
     absl::optional<Router::ConfigConstSharedPtr> routeConfig();
+
+    bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr host,
+				  StreamInfo::StreamInfo& stream_info) const override {
+      return connection_manager_.read_callbacks_->iterateUpstreamCallbacks(host, stream_info);
+    }
+
     void traceRequest();
 
     // Updates the snapped_route_config_ (by reselecting scoped route configuration), if a scope is
diff --git a/source/common/http/filter_manager.cc b/source/common/http/filter_manager.cc
index 5f71e1cfb5..2190b0b2fe 100644
--- a/source/common/http/filter_manager.cc
+++ b/source/common/http/filter_manager.cc
@@ -1720,5 +1720,11 @@ absl::optional<absl::string_view> ActiveStreamDecoderFilter::upstreamOverrideHos
   return parent_.upstream_override_host_;
 }
 
+bool ActiveStreamDecoderFilter::iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr host,
+                                                         StreamInfo::StreamInfo& stream_info) {
+  return parent_.filter_manager_callbacks_.iterateUpstreamCallbacks(host, stream_info);
+
+}
+
 } // namespace Http
 } // namespace Envoy
diff --git a/source/common/http/filter_manager.h b/source/common/http/filter_manager.h
index 610ca49fd9..3fc168de60 100644
--- a/source/common/http/filter_manager.h
+++ b/source/common/http/filter_manager.h
@@ -240,6 +240,8 @@ struct ActiveStreamDecoderFilter : public ActiveStreamFilterBase,
   Buffer::BufferMemoryAccountSharedPtr account() const override;
   void setUpstreamOverrideHost(absl::string_view host) override;
   absl::optional<absl::string_view> upstreamOverrideHost() const override;
+  bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr host,
+                                StreamInfo::StreamInfo& stream_info) override;
 
   // Each decoder filter instance checks if the request passed to the filter is gRPC
   // so that we can issue gRPC local responses to gRPC requests. Filter's decodeHeaders()
@@ -518,6 +520,12 @@ public:
    * Returns a handle to the downstream callbacks, if available.
    */
   virtual OptRef<DownstreamStreamFilterCallbacks> downstreamCallbacks() { return {}; }
+
+  /*
+   * Returns whether connection to the selected upstream host is allowed.
+   */
+  virtual bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr,
+                                        StreamInfo::StreamInfo&) const PURE;
 };
 
 /**
diff --git a/source/common/network/filter_manager_impl.h b/source/common/network/filter_manager_impl.h
index 27bc856921..9bc7adb691 100644
--- a/source/common/network/filter_manager_impl.h
+++ b/source/common/network/filter_manager_impl.h
@@ -132,6 +132,13 @@ private:
       parent_.host_description_ = host;
     }
     bool startUpstreamSecureTransport() override { return parent_.startUpstreamSecureTransport(); }
+    void addUpstreamCallback(const UpstreamCallback& cb) override {
+      parent_.addUpstreamCallback(cb);
+    }
+    bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr host,
+                                  StreamInfo::StreamInfo& stream_info) override {
+      return parent_.iterateUpstreamCallbacks(host, stream_info);
+    }
 
     FilterManagerImpl& parent_;
     ReadFilterSharedPtr filter_;
@@ -162,6 +169,20 @@ private:
   FilterStatus onWrite(ActiveWriteFilter* filter, WriteBufferSource& buffer_source);
   void onResumeWriting(ActiveWriteFilter* filter, WriteBufferSource& buffer_source);
 
+  void addUpstreamCallback(const UpstreamCallback& cb) {
+    decoder_filter_upstream_cbs_.emplace_back(cb);
+  }
+    
+  bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr host,
+				StreamInfo::StreamInfo& stream_info) {
+    bool accept = true;
+    for (const auto& cb : decoder_filter_upstream_cbs_) {
+      accept = accept && cb(host, stream_info);
+    }
+    return accept;
+  }
+
+  std::vector<UpstreamCallback> decoder_filter_upstream_cbs_{};
   FilterManagerConnection& connection_;
   const Socket& socket_;
   Upstream::HostDescriptionConstSharedPtr host_description_;
diff --git a/source/common/router/router.cc b/source/common/router/router.cc
index 82dea84326..754a43c9cd 100644
--- a/source/common/router/router.cc
+++ b/source/common/router/router.cc
@@ -622,6 +622,14 @@ Http::FilterHeadersStatus Filter::decodeHeaders(Http::RequestHeaderMap& headers,
     return Http::FilterHeadersStatus::StopIteration;
   }
 
+  bool accepted = callbacks_->iterateUpstreamCallbacks(host, callbacks_->streamInfo());
+  if (!accepted) {
+    callbacks_->streamInfo().setResponseFlag(StreamInfo::ResponseFlag::UnauthorizedExternalService);
+    callbacks_->sendLocalReply(Http::Code::Forbidden, "Access denied\r\n",
+                               nullptr, absl::nullopt, absl::string_view());
+    return Http::FilterHeadersStatus::StopIteration;
+  }
+  
   hedging_params_ = FilterUtility::finalHedgingParams(*route_entry_, headers);
 
   timeout_ = FilterUtility::finalTimeout(*route_entry_, headers, !config_.suppress_envoy_headers_,
diff --git a/source/common/router/upstream_request.h b/source/common/router/upstream_request.h
index a91b75c833..33b57fa641 100644
--- a/source/common/router/upstream_request.h
+++ b/source/common/router/upstream_request.h
@@ -349,6 +349,11 @@ public:
   }
   OptRef<UpstreamStreamFilterCallbacks> upstreamCallbacks() override { return {*this}; }
 
+  bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr,
+				StreamInfo::StreamInfo&) const override {
+    return true;
+  }
+
   // Http::UpstreamStreamFilterCallbacks
   StreamInfo::StreamInfo& upstreamStreamInfo() override { return upstream_request_.streamInfo(); }
   OptRef<GenericUpstream> upstream() override {
diff --git a/source/common/tcp_proxy/tcp_proxy.cc b/source/common/tcp_proxy/tcp_proxy.cc
index 4d611627a3..f40b5bdb2d 100644
--- a/source/common/tcp_proxy/tcp_proxy.cc
+++ b/source/common/tcp_proxy/tcp_proxy.cc
@@ -518,6 +518,13 @@ bool Filter::maybeTunnel(Upstream::ThreadLocalCluster& cluster) {
   generic_conn_pool_ = factory->createGenericConnPool(cluster, config_->tunnelingConfigHelper(),
                                                       this, *upstream_callbacks_, getStreamInfo());
   if (generic_conn_pool_) {
+    bool accepted = read_callbacks_->iterateUpstreamCallbacks(generic_conn_pool_->host(), getStreamInfo());
+    if (!accepted) {
+      getStreamInfo().setResponseFlag(StreamInfo::ResponseFlag::UnauthorizedExternalService);
+      onInitFailure(UpstreamFailureReason::UnauthorizedExternalService);
+      return true;
+    }
+
     connecting_ = true;
     connect_attempts_++;
     getStreamInfo().setAttemptCount(connect_attempts_);
diff --git a/source/common/tcp_proxy/tcp_proxy.h b/source/common/tcp_proxy/tcp_proxy.h
index 4ce8a350ab..6abaea2f6c 100644
--- a/source/common/tcp_proxy/tcp_proxy.h
+++ b/source/common/tcp_proxy/tcp_proxy.h
@@ -481,6 +481,7 @@ protected:
     NoHealthyUpstream,
     ResourceLimitExceeded,
     NoRoute,
+    UnauthorizedExternalService,
   };
 
   // Callbacks for different error and success states during connection establishment
diff --git a/source/common/tcp_proxy/upstream.cc b/source/common/tcp_proxy/upstream.cc
index ea9e2ba73e..1997b84166 100644
--- a/source/common/tcp_proxy/upstream.cc
+++ b/source/common/tcp_proxy/upstream.cc
@@ -191,6 +191,10 @@ void TcpConnPool::newStream(GenericConnectionPoolCallbacks& callbacks) {
   }
 }
 
+Upstream::HostDescriptionConstSharedPtr TcpConnPool::host() const {
+  return conn_pool_data_.value().host();
+}
+
 void TcpConnPool::onPoolFailure(ConnectionPool::PoolFailureReason reason,
                                 absl::string_view failure_reason,
                                 Upstream::HostDescriptionConstSharedPtr host) {
@@ -258,6 +262,10 @@ void HttpConnPool::newStream(GenericConnectionPoolCallbacks& callbacks) {
   }
 }
 
+Upstream::HostDescriptionConstSharedPtr HttpConnPool::host() const {
+  return conn_pool_data_.value().host();
+}
+
 void HttpConnPool::onPoolFailure(ConnectionPool::PoolFailureReason reason,
                                  absl::string_view failure_reason,
                                  Upstream::HostDescriptionConstSharedPtr host) {
diff --git a/source/common/tcp_proxy/upstream.h b/source/common/tcp_proxy/upstream.h
index feeea15a56..ef56d69d29 100644
--- a/source/common/tcp_proxy/upstream.h
+++ b/source/common/tcp_proxy/upstream.h
@@ -29,6 +29,7 @@ public:
 
   // GenericConnPool
   void newStream(GenericConnectionPoolCallbacks& callbacks) override;
+  Upstream::HostDescriptionConstSharedPtr host() const override;
 
   // Tcp::ConnectionPool::Callbacks
   void onPoolFailure(ConnectionPool::PoolFailureReason reason,
@@ -59,6 +60,7 @@ public:
 
   // GenericConnPool
   void newStream(GenericConnectionPoolCallbacks& callbacks) override;
+  Upstream::HostDescriptionConstSharedPtr host() const override;
 
   // Http::ConnectionPool::Callbacks,
   void onPoolFailure(ConnectionPool::PoolFailureReason reason,
diff --git a/source/server/api_listener_impl.h b/source/server/api_listener_impl.h
index fb787f8172..b37cdc9e85 100644
--- a/source/server/api_listener_impl.h
+++ b/source/server/api_listener_impl.h
@@ -76,6 +76,9 @@ protected:
     }
     Network::Connection& connection() override { return connection_; }
     const Network::Socket& socket() override { PANIC("not implemented"); }
+    void addUpstreamCallback(const Network::UpstreamCallback&) override {}
+    bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr,
+				  StreamInfo::StreamInfo&) override { return true; }
 
     // Synthetic class that acts as a stub for the connection backing the
     // Network::ReadFilterCallbacks.
-- 
2.41.0

