From 0920d44b92f292542ed78fed2461105f21c77d81 Mon Sep 17 00:00:00 2001
From: Jarno Rajahalme <jarno@isovalent.com>
Date: Mon, 24 Jan 2022 15:40:28 +0200
Subject: [PATCH 1/6] network: Add callback for upstream authorization

Add new ReadFilterCallbacks addUpstreamCallback() and
iterateUpstreamCallbacks(). Network filters can add callbacks using
addUpstreamCallback(), which will then get called after an upstream
host has been selected, but before the upstream connection is
established.  If any of the callbacks returns 'false', the connection
is not established. For HTTP the router will issue a 403 local
response.

iterateUpstreamCallbacks() is also added to
StreamDecoderFilterCallbacks so that the HTTP router filter can invoke
the added callbacks before a new connection is established.

These additions allow network read filters to perform network level
policy enforcement based on the selected upstream host.

Callbacks can safely refer to memory held by the filter instance
adding the callback, as the calls to the callbacks are only ever be
done from the tcp_proxy or router filter in the same filter chain.

Signed-off-by: Jarno Rajahalme <jarno@isovalent.com>
---
 envoy/http/filter.h                         |  8 ++++++
 envoy/network/filter.h                      | 28 +++++++++++++++++++++
 envoy/tcp/upstream.h                        |  5 ++++
 source/common/http/async_client_impl.h      |  4 +++
 source/common/http/conn_manager_impl.h      |  5 ++++
 source/common/http/filter_manager.cc        |  6 +++++
 source/common/http/filter_manager.h         |  9 +++++++
 source/common/network/filter_manager_impl.h | 21 ++++++++++++++++
 source/common/router/router.cc              |  8 ++++++
 source/common/tcp_proxy/tcp_proxy.cc        |  7 ++++++
 source/common/tcp_proxy/tcp_proxy.h         |  1 +
 source/common/tcp_proxy/upstream.cc         |  8 ++++++
 source/common/tcp_proxy/upstream.h          |  2 ++
 source/server/api_listener_impl.h           |  3 +++
 14 files changed, 115 insertions(+)

diff --git a/envoy/http/filter.h b/envoy/http/filter.h
index 03df0a36a7..fe2494284d 100644
--- a/envoy/http/filter.h
+++ b/envoy/http/filter.h
@@ -639,6 +639,14 @@ public:
    * load balancing.
    */
   virtual absl::optional<absl::string_view> upstreamOverrideHost() const PURE;
+
+  /**
+   * Invokes all the added network level callbacks before establishing a connection to the
+   * selected upstream host.
+   * Returns 'false' if any of the callbacks rejects the connection, 'true' otherwise.
+   */
+  virtual bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr,
+                                        StreamInfo::StreamInfo&) PURE;
 };
 
 /**
diff --git a/envoy/network/filter.h b/envoy/network/filter.h
index ec6d14f904..df5799b747 100644
--- a/envoy/network/filter.h
+++ b/envoy/network/filter.h
@@ -111,6 +111,22 @@ public:
 
 using WriteFilterSharedPtr = std::shared_ptr<WriteFilter>;
 
+/**
+ * UpstreamCallback can be used to reject upstream host selection made by the TCP proxy filter.
+ * This callback is passed the Upstream::HostDescriptionConstSharedPtr, and StreamInfo.
+ *
+ * The callback is called just after the upstream host has been picked, but before a connection is
+ * established. Here the callback can reject the selected upstream host and cause the be dropped.
+
+ * UpstreamCallback may not be called if the connection is dropped for another reason, such as
+ * no route, cluster is not found, etc.
+ *
+ * Returning 'true' allows the connection to be established. Returning 'false' prevents the
+ * connection to the selected host from being established.
+ */
+using UpstreamCallback = std::function<bool(Upstream::HostDescriptionConstSharedPtr,
+                                            StreamInfo::StreamInfo&)>;
+
 /**
  * Callbacks used by individual read filter instances to communicate with the filter manager.
  */
@@ -161,6 +177,18 @@ public:
    * Set the currently selected upstream host for the connection.
    */
   virtual void upstreamHost(Upstream::HostDescriptionConstSharedPtr host) PURE;
+
+  /**
+   * Adds the given callback to be executed later via iterateUpstreamCallbacks().
+   */
+  virtual void addUpstreamCallback(const UpstreamCallback& cb) PURE;
+
+  /**
+   * Invokes all the added callbacks before connecting to the selected upstream host.
+   * Returns 'false' if any of the callbacks rejects the connection, 'true' otherwise.
+   */
+  virtual bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr,
+                                        StreamInfo::StreamInfo&) PURE;
 };
 
 /**
diff --git a/envoy/tcp/upstream.h b/envoy/tcp/upstream.h
index be6170c8ae..f40e2931ef 100644
--- a/envoy/tcp/upstream.h
+++ b/envoy/tcp/upstream.h
@@ -53,6 +53,11 @@ public:
    * @param callbacks callbacks to communicate stream failure or creation on.
    */
   virtual void newStream(GenericConnectionPoolCallbacks& callbacks) PURE;
+
+  /**
+   * @return Upstream::HostDescriptionConstSharedPtr the host for which connections are pooled.
+   */
+  virtual Upstream::HostDescriptionConstSharedPtr host() const PURE;
 };
 
 // An API for the UpstreamRequest to get callbacks from either an HTTP or TCP
diff --git a/source/common/http/async_client_impl.h b/source/common/http/async_client_impl.h
index 6e13c150e3..4d83b5a747 100644
--- a/source/common/http/async_client_impl.h
+++ b/source/common/http/async_client_impl.h
@@ -344,6 +344,10 @@ private:
   const Network::Connection* connection() override { return nullptr; }
   Event::Dispatcher& dispatcher() override { return parent_.dispatcher_; }
   void resetStream() override;
+  bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr,
+                                StreamInfo::StreamInfo&) override {
+    return true;
+  }
   Router::RouteConstSharedPtr route() override { return route_; }
   Router::RouteConstSharedPtr route(const Router::RouteCallback&) override { return nullptr; }
   void setRoute(Router::RouteConstSharedPtr) override {}
diff --git a/source/common/http/conn_manager_impl.h b/source/common/http/conn_manager_impl.h
index 41412f624b..5e8bb972ed 100644
--- a/source/common/http/conn_manager_impl.h
+++ b/source/common/http/conn_manager_impl.h
@@ -285,6 +285,11 @@ private:
     Tracing::Config& tracingConfig() override;
     const ScopeTrackedObject& scope() override;
 
+    bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr host,
+				  StreamInfo::StreamInfo& stream_info) const override {
+      return connection_manager_.read_callbacks_->iterateUpstreamCallbacks(host, stream_info);
+    }
+
     void traceRequest();
 
     // Updates the snapped_route_config_ (by reselecting scoped route configuration), if a scope is
diff --git a/source/common/http/filter_manager.cc b/source/common/http/filter_manager.cc
index 4cf3d769a3..4c59d0d9ef 100644
--- a/source/common/http/filter_manager.cc
+++ b/source/common/http/filter_manager.cc
@@ -1377,6 +1377,12 @@ bool FilterManager::createFilterChain() {
   return !upgrade_rejected;
 }
 
+bool ActiveStreamDecoderFilter::iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr host,
+                                                         StreamInfo::StreamInfo& stream_info) {
+  return parent_.filter_manager_callbacks_.iterateUpstreamCallbacks(host, stream_info);
+
+}
+
 void ActiveStreamDecoderFilter::requestDataDrained() {
   // If this is called it means the call to requestDataTooLarge() was a
   // streaming call, or a 413 would have been sent.
diff --git a/source/common/http/filter_manager.h b/source/common/http/filter_manager.h
index d709e78f8f..df33d8fcdd 100644
--- a/source/common/http/filter_manager.h
+++ b/source/common/http/filter_manager.h
@@ -250,6 +250,9 @@ struct ActiveStreamDecoderFilter : public ActiveStreamFilterBase,
       Http::RouteConfigUpdatedCallbackSharedPtr route_config_updated_cb) override;
   absl::optional<Router::ConfigConstSharedPtr> routeConfig();
 
+  bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr host,
+                                StreamInfo::StreamInfo& stream_info) override;
+
   StreamDecoderFilterSharedPtr handle_;
   bool is_grpc_request_{};
 };
@@ -530,6 +533,12 @@ public:
    * Returns the tracked scope to use for this stream.
    */
   virtual const ScopeTrackedObject& scope() PURE;
+
+  /**
+   * Returns whether connection to the selected upstream host is allowed.
+   */
+  virtual bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr,
+                                        StreamInfo::StreamInfo&) const PURE;
 };
 
 /**
diff --git a/source/common/network/filter_manager_impl.h b/source/common/network/filter_manager_impl.h
index 8797316093..6ff42ffa43 100644
--- a/source/common/network/filter_manager_impl.h
+++ b/source/common/network/filter_manager_impl.h
@@ -130,6 +130,13 @@ private:
     void upstreamHost(Upstream::HostDescriptionConstSharedPtr host) override {
       parent_.host_description_ = host;
     }
+    void addUpstreamCallback(const UpstreamCallback& cb) override {
+      parent_.addUpstreamCallback(cb);
+    }
+    bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr host,
+                                  StreamInfo::StreamInfo& stream_info) override {
+      return parent_.iterateUpstreamCallbacks(host, stream_info);
+    }
 
     FilterManagerImpl& parent_;
     ReadFilterSharedPtr filter_;
@@ -160,6 +167,20 @@ private:
   FilterStatus onWrite(ActiveWriteFilter* filter, WriteBufferSource& buffer_source);
   void onResumeWriting(ActiveWriteFilter* filter, WriteBufferSource& buffer_source);
 
+  void addUpstreamCallback(const UpstreamCallback& cb) {
+    decoder_filter_upstream_cbs_.emplace_back(cb);
+  }
+    
+  bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr host,
+				StreamInfo::StreamInfo& stream_info) {
+    bool accept = true;
+    for (const auto& cb : decoder_filter_upstream_cbs_) {
+      accept = accept && cb(host, stream_info);
+    }
+    return accept;
+  }
+
+  std::vector<UpstreamCallback> decoder_filter_upstream_cbs_{};
   FilterManagerConnection& connection_;
   const Socket& socket_;
   Upstream::HostDescriptionConstSharedPtr host_description_;
diff --git a/source/common/router/router.cc b/source/common/router/router.cc
index 8ad142d67d..fccf07c171 100644
--- a/source/common/router/router.cc
+++ b/source/common/router/router.cc
@@ -611,6 +611,14 @@ Http::FilterHeadersStatus Filter::decodeHeaders(Http::RequestHeaderMap& headers,
     return Http::FilterHeadersStatus::StopIteration;
   }
 
+  bool accepted = callbacks_->iterateUpstreamCallbacks(host, callbacks_->streamInfo());
+  if (!accepted) {
+    callbacks_->streamInfo().setResponseFlag(StreamInfo::ResponseFlag::UnauthorizedExternalService);
+    callbacks_->sendLocalReply(Http::Code::Forbidden, "Access denied\r\n",
+                               nullptr, absl::nullopt, absl::string_view());
+    return Http::FilterHeadersStatus::StopIteration;
+  }
+  
   hedging_params_ = FilterUtility::finalHedgingParams(*route_entry_, headers);
 
   timeout_ = FilterUtility::finalTimeout(*route_entry_, headers, !config_.suppress_envoy_headers_,
diff --git a/source/common/tcp_proxy/tcp_proxy.cc b/source/common/tcp_proxy/tcp_proxy.cc
index f0c1c5d42f..5bb7c5a585 100644
--- a/source/common/tcp_proxy/tcp_proxy.cc
+++ b/source/common/tcp_proxy/tcp_proxy.cc
@@ -470,6 +470,13 @@ bool Filter::maybeTunnel(Upstream::ThreadLocalCluster& cluster) {
   generic_conn_pool_ = factory->createGenericConnPool(cluster, config_->tunnelingConfigHelper(),
                                                       this, *upstream_callbacks_);
   if (generic_conn_pool_) {
+    bool accepted = read_callbacks_->iterateUpstreamCallbacks(generic_conn_pool_->host(), getStreamInfo());
+    if (!accepted) {
+      getStreamInfo().setResponseFlag(StreamInfo::ResponseFlag::UnauthorizedExternalService);
+      onInitFailure(UpstreamFailureReason::UnauthorizedExternalService);
+      return true;
+    }
+
     connecting_ = true;
     connect_attempts_++;
     getStreamInfo().setAttemptCount(connect_attempts_);
diff --git a/source/common/tcp_proxy/tcp_proxy.h b/source/common/tcp_proxy/tcp_proxy.h
index 0f3705c9d2..ab44713d9c 100644
--- a/source/common/tcp_proxy/tcp_proxy.h
+++ b/source/common/tcp_proxy/tcp_proxy.h
@@ -420,6 +420,7 @@ protected:
     NoHealthyUpstream,
     ResourceLimitExceeded,
     NoRoute,
+    UnauthorizedExternalService,
   };
 
   // Callbacks for different error and success states during connection establishment
diff --git a/source/common/tcp_proxy/upstream.cc b/source/common/tcp_proxy/upstream.cc
index 53dbff2a2e..9ea545496d 100644
--- a/source/common/tcp_proxy/upstream.cc
+++ b/source/common/tcp_proxy/upstream.cc
@@ -173,6 +173,10 @@ void TcpConnPool::newStream(GenericConnectionPoolCallbacks& callbacks) {
   }
 }
 
+Upstream::HostDescriptionConstSharedPtr TcpConnPool::host() const {
+  return conn_pool_data_.value().host();
+}
+
 void TcpConnPool::onPoolFailure(ConnectionPool::PoolFailureReason reason,
                                 absl::string_view failure_reason,
                                 Upstream::HostDescriptionConstSharedPtr host) {
@@ -234,6 +238,10 @@ void HttpConnPool::newStream(GenericConnectionPoolCallbacks& callbacks) {
   }
 }
 
+Upstream::HostDescriptionConstSharedPtr HttpConnPool::host() const {
+  return conn_pool_data_.value().host();
+}
+
 void HttpConnPool::onPoolFailure(ConnectionPool::PoolFailureReason reason,
                                  absl::string_view failure_reason,
                                  Upstream::HostDescriptionConstSharedPtr host) {
diff --git a/source/common/tcp_proxy/upstream.h b/source/common/tcp_proxy/upstream.h
index 2597804939..5dccfc1b29 100644
--- a/source/common/tcp_proxy/upstream.h
+++ b/source/common/tcp_proxy/upstream.h
@@ -26,6 +26,7 @@ public:
 
   // GenericConnPool
   void newStream(GenericConnectionPoolCallbacks& callbacks) override;
+  Upstream::HostDescriptionConstSharedPtr host() const override;
 
   // Tcp::ConnectionPool::Callbacks
   void onPoolFailure(ConnectionPool::PoolFailureReason reason,
@@ -54,6 +55,7 @@ public:
 
   // GenericConnPool
   void newStream(GenericConnectionPoolCallbacks& callbacks) override;
+  Upstream::HostDescriptionConstSharedPtr host() const override;
 
   // Http::ConnectionPool::Callbacks,
   void onPoolFailure(ConnectionPool::PoolFailureReason reason,
diff --git a/source/server/api_listener_impl.h b/source/server/api_listener_impl.h
index 13bd63e3fe..49e6a83071 100644
--- a/source/server/api_listener_impl.h
+++ b/source/server/api_listener_impl.h
@@ -73,6 +73,9 @@ protected:
     }
     Network::Connection& connection() override { return connection_; }
     const Network::Socket& socket() override { PANIC("not implemented"); }
+    void addUpstreamCallback(const Network::UpstreamCallback&) override {}
+    bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr,
+				  StreamInfo::StreamInfo&) override { return true; }
 
     // Synthetic class that acts as a stub for the connection backing the
     // Network::ReadFilterCallbacks.
-- 
2.39.2

