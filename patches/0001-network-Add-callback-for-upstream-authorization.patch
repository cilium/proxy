From d1759627dac4a556d7e17161bdfd9ff86b9bfa89 Mon Sep 17 00:00:00 2001
From: Jarno Rajahalme <jarno@isovalent.com>
Date: Mon, 24 Jan 2022 15:40:28 +0200
Subject: [PATCH 1/5] network: Add callback for upstream authorization

Add new ReadFilterCallbacks addUpstreamCallback() and
iterateUpstreamCallbacks(). Network filters can add callbacks using
addUpstreamCallback(), which will then get called after an upstream
host has been selected, but before the upstream connection is
established.  If any of the callbacks returns 'false', the connection
is not established. For HTTP the router will issue a 403 local
response.

iterateUpstreamCallbacks() is also added to
StreamDecoderFilterCallbacks so that the HTTP router filter can invoke
the added callbacks before a new connection is established.

These additions allow network read filters to perform network level
policy enforcement based on the selected upstream host.

Callbacks can safely refer to memory held by the filter instance
adding the callback, as the calls to the callbacks are only ever be
done from the tcp_proxy or router filter in the same filter chain.

Signed-off-by: Jarno Rajahalme <jarno@isovalent.com>
---
 envoy/http/filter.h                         |  7 ++++++
 envoy/network/filter.h                      | 28 +++++++++++++++++++++
 envoy/tcp/upstream.h                        |  5 ++++
 source/common/http/async_client_impl.h      |  5 ++++
 source/common/http/conn_manager_impl.h      |  6 +++++
 source/common/http/filter_manager.cc        |  6 +++++
 source/common/http/filter_manager.h         |  8 ++++++
 source/common/network/filter_manager_impl.h | 21 ++++++++++++++++
 source/common/router/router.cc              |  8 ++++++
 source/common/router/upstream_request.h     |  5 ++++
 source/common/tcp_proxy/tcp_proxy.cc        |  7 ++++++
 source/common/tcp_proxy/tcp_proxy.h         |  5 ++++
 source/common/tcp_proxy/upstream.cc         |  8 ++++++
 source/common/tcp_proxy/upstream.h          |  2 ++
 source/server/api_listener_impl.h           |  3 +++
 15 files changed, 124 insertions(+)

diff --git a/envoy/http/filter.h b/envoy/http/filter.h
index f1283df286..88fa85c2f0 100644
--- a/envoy/http/filter.h
+++ b/envoy/http/filter.h
@@ -816,6 +816,13 @@ public:
   virtual absl::optional<Upstream::LoadBalancerContext::OverrideHost>
   upstreamOverrideHost() const PURE;

+  /**
+   * Invokes all the added network level callbacks before establishing a connection to the
+   * selected upstream host.
+   * Returns 'false' if any of the callbacks rejects the connection, 'true' otherwise.
+   */
+  virtual bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr,
+                                        StreamInfo::StreamInfo&) PURE;
   /**
    * @return true if the filter should shed load based on the system pressure, typically memory.
    */
diff --git a/envoy/network/filter.h b/envoy/network/filter.h
index f2d6c2ef9c..590a2ff7fa 100644
--- a/envoy/network/filter.h
+++ b/envoy/network/filter.h
@@ -117,6 +117,22 @@ public:

 using WriteFilterSharedPtr = std::shared_ptr<WriteFilter>;

+/**
+ * UpstreamCallback can be used to reject upstream host selection made by the TCP proxy filter.
+ * This callback is passed the Upstream::HostDescriptionConstSharedPtr, and StreamInfo.
+ *
+ * The callback is called just after the upstream host has been picked, but before a connection is
+ * established. Here the callback can reject the selected upstream host and cause the be dropped.
+
+ * UpstreamCallback may not be called if the connection is dropped for another reason, such as
+ * no route, cluster is not found, etc.
+ *
+ * Returning 'true' allows the connection to be established. Returning 'false' prevents the
+ * connection to the selected host from being established.
+ */
+using UpstreamCallback = std::function<bool(Upstream::HostDescriptionConstSharedPtr,
+                                            StreamInfo::StreamInfo&)>;
+
 /**
  * Callbacks used by individual read filter instances to communicate with the filter manager.
  */
@@ -175,6 +191,18 @@ public:
    * mode to secure mode.
    */
   virtual bool startUpstreamSecureTransport() PURE;
+
+  /*
+   * Adds the given callback to be executed later via iterateUpstreamCallbacks().
+   */
+  virtual void addUpstreamCallback(const UpstreamCallback& cb) PURE;
+
+  /**
+   * Invokes all the added callbacks before connecting to the selected upstream host.
+   * Returns 'false' if any of the callbacks rejects the connection, 'true' otherwise.
+   */
+  virtual bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr,
+                                        StreamInfo::StreamInfo&) PURE;
 };

 /**
diff --git a/envoy/tcp/upstream.h b/envoy/tcp/upstream.h
index b201d2e153..9aece0fc6c 100644
--- a/envoy/tcp/upstream.h
+++ b/envoy/tcp/upstream.h
@@ -72,6 +72,11 @@ public:
    * @param callbacks callbacks to communicate stream failure or creation on.
    */
   virtual void newStream(GenericConnectionPoolCallbacks& callbacks) PURE;
+
+  /**
+   * @return Upstream::HostDescriptionConstSharedPtr the host for which connections are pooled.
+   */
+  virtual Upstream::HostDescriptionConstSharedPtr host() const PURE;
 };

 // An API for the UpstreamRequest to get callbacks from either an HTTP or TCP
diff --git a/source/common/http/async_client_impl.h b/source/common/http/async_client_impl.h
index ead93183f0..b9f1315afa 100644
--- a/source/common/http/async_client_impl.h
+++ b/source/common/http/async_client_impl.h
@@ -265,6 +265,11 @@ private:
   ResponseHeaderMapOptRef responseHeaders() override { return {}; }
   ResponseTrailerMapOptRef responseTrailers() override { return {}; }

+  bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr,
+                            StreamInfo::StreamInfo&) override {
+    return true;
+  }
+
   // ScopeTrackedObject
   void dumpState(std::ostream& os, int indent_level) const override {
     const char* spaces = spacesForLevel(indent_level);
diff --git a/source/common/http/conn_manager_impl.h b/source/common/http/conn_manager_impl.h
index 01062379d0..3ce54a28b7 100644
--- a/source/common/http/conn_manager_impl.h
+++ b/source/common/http/conn_manager_impl.h
@@ -326,6 +326,12 @@ private:
     }

     absl::optional<Router::ConfigConstSharedPtr> routeConfig();
+
+    bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr host,
+          StreamInfo::StreamInfo& stream_info) const override {
+      return connection_manager_.read_callbacks_->iterateUpstreamCallbacks(host, stream_info);
+    }
+
     void traceRequest();

     // Updates the snapped_route_config_ (by reselecting scoped route configuration), if a scope is
diff --git a/source/common/http/filter_manager.cc b/source/common/http/filter_manager.cc
index 665c0572a9..566b1c13cb 100644
--- a/source/common/http/filter_manager.cc
+++ b/source/common/http/filter_manager.cc
@@ -1954,5 +1954,11 @@ ActiveStreamDecoderFilter::upstreamOverrideHost() const {
   return parent_.upstream_override_host_;
 }

+bool ActiveStreamDecoderFilter::iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr host,
+                                                         StreamInfo::StreamInfo& stream_info) {
+  return parent_.filter_manager_callbacks_.iterateUpstreamCallbacks(host, stream_info);
+
+}
+
 } // namespace Http
 } // namespace Envoy
diff --git a/source/common/http/filter_manager.h b/source/common/http/filter_manager.h
index 2a2a8b3178..be6a33ad42 100644
--- a/source/common/http/filter_manager.h
+++ b/source/common/http/filter_manager.h
@@ -305,6 +305,8 @@ struct ActiveStreamDecoderFilter : public ActiveStreamFilterBase,
   void setUpstreamOverrideHost(Upstream::LoadBalancerContext::OverrideHost) override;
   absl::optional<Upstream::LoadBalancerContext::OverrideHost> upstreamOverrideHost() const override;
   bool shouldLoadShed() const override;
+  bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr host,
+                              StreamInfo::StreamInfo& stream_info) override;
   void sendGoAwayAndClose() override;

   // Each decoder filter instance checks if the request passed to the filter is gRPC
@@ -591,6 +593,12 @@ public:
    * This is used for HTTP/1.1 codec.
    */
   virtual bool isHalfCloseEnabled() PURE;
+
+  /*
+   * Returns whether connection to the selected upstream host is allowed.
+   */
+  virtual bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr,
+                                        StreamInfo::StreamInfo&) const PURE;
 };

 /**
diff --git a/source/common/network/filter_manager_impl.h b/source/common/network/filter_manager_impl.h
index 27bc856921..0c33be97d1 100644
--- a/source/common/network/filter_manager_impl.h
+++ b/source/common/network/filter_manager_impl.h
@@ -132,6 +132,13 @@ private:
       parent_.host_description_ = host;
     }
     bool startUpstreamSecureTransport() override { return parent_.startUpstreamSecureTransport(); }
+    void addUpstreamCallback(const UpstreamCallback& cb) override {
+      parent_.addUpstreamCallback(cb);
+    }
+    bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr host,
+                                  StreamInfo::StreamInfo& stream_info) override {
+      return parent_.iterateUpstreamCallbacks(host, stream_info);
+    }

     FilterManagerImpl& parent_;
     ReadFilterSharedPtr filter_;
@@ -162,6 +169,20 @@ private:
   FilterStatus onWrite(ActiveWriteFilter* filter, WriteBufferSource& buffer_source);
   void onResumeWriting(ActiveWriteFilter* filter, WriteBufferSource& buffer_source);

+  void addUpstreamCallback(const UpstreamCallback& cb) {
+    decoder_filter_upstream_cbs_.emplace_back(cb);
+  }
+
+  bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr host,
+        StreamInfo::StreamInfo& stream_info) {
+    bool accept = true;
+    for (const auto& cb : decoder_filter_upstream_cbs_) {
+      accept = accept && cb(host, stream_info);
+    }
+    return accept;
+  }
+
+  std::vector<UpstreamCallback> decoder_filter_upstream_cbs_{};
   FilterManagerConnection& connection_;
   const Socket& socket_;
   Upstream::HostDescriptionConstSharedPtr host_description_;
diff --git a/source/common/router/router.cc b/source/common/router/router.cc
index b37eb8b315..37dadeb999 100644
--- a/source/common/router/router.cc
+++ b/source/common/router/router.cc
@@ -699,6 +699,14 @@ Http::FilterHeadersStatus Filter::decodeHeaders(Http::RequestHeaderMap& headers,
     return Http::FilterHeadersStatus::StopIteration;
   }

+  bool accepted = callbacks_->iterateUpstreamCallbacks(host, callbacks_->streamInfo());
+  if (!accepted) {
+    callbacks_->streamInfo().setResponseFlag(StreamInfo::CoreResponseFlag::UnauthorizedExternalService);
+    callbacks_->sendLocalReply(Http::Code::Forbidden, "Access denied\r\n",
+                               nullptr, absl::nullopt, absl::string_view());
+    return Http::FilterHeadersStatus::StopIteration;
+  }
+
   hedging_params_ = FilterUtility::finalHedgingParams(*route_entry_, headers);

   timeout_ = FilterUtility::finalTimeout(*route_entry_, headers, !config_->suppress_envoy_headers_,
diff --git a/source/common/router/upstream_request.h b/source/common/router/upstream_request.h
index da2a1188b5..100065f6c9 100644
--- a/source/common/router/upstream_request.h
+++ b/source/common/router/upstream_request.h
@@ -350,6 +350,11 @@ public:
   }
   OptRef<UpstreamStreamFilterCallbacks> upstreamCallbacks() override { return {*this}; }

+  bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr,
+        StreamInfo::StreamInfo&) const override {
+    return true;
+  }
+
   // Http::UpstreamStreamFilterCallbacks
   StreamInfo::StreamInfo& upstreamStreamInfo() override { return upstream_request_.streamInfo(); }
   OptRef<GenericUpstream> upstream() override {
diff --git a/source/common/tcp_proxy/tcp_proxy.cc b/source/common/tcp_proxy/tcp_proxy.cc
index 92df517bf1..feab76e70e 100644
--- a/source/common/tcp_proxy/tcp_proxy.cc
+++ b/source/common/tcp_proxy/tcp_proxy.cc
@@ -576,6 +576,13 @@ bool Filter::maybeTunnel(Upstream::ThreadLocalCluster& cluster) {
         upstream_decoder_filter_callbacks_, getStreamInfo());
   }
   if (generic_conn_pool_) {
+    bool accepted = read_callbacks_->iterateUpstreamCallbacks(generic_conn_pool_->host(), getStreamInfo());
+    if (!accepted) {
+      getStreamInfo().setResponseFlag(StreamInfo::CoreResponseFlag::UnauthorizedExternalService);
+      onInitFailure(UpstreamFailureReason::UnauthorizedExternalService);
+      return true;
+    }
+
     connecting_ = true;
     connect_attempts_++;
     getStreamInfo().setAttemptCount(connect_attempts_);
diff --git a/source/common/tcp_proxy/tcp_proxy.h b/source/common/tcp_proxy/tcp_proxy.h
index 75b6af7fe3..12227f95fe 100644
--- a/source/common/tcp_proxy/tcp_proxy.h
+++ b/source/common/tcp_proxy/tcp_proxy.h
@@ -555,6 +555,10 @@ public:
       return absl::nullopt;
     }
     bool shouldLoadShed() const override { return false; }
+    bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr host,
+                                                     StreamInfo::StreamInfo& stream_info) override {
+      return parent_->upstream_decoder_filter_callbacks_.iterateUpstreamCallbacks(host, stream_info);
+    }
     void restoreContextOnContinue(ScopeTrackedObjectStack& tracked_object_stack) override {
       tracked_object_stack.add(*this);
     }
@@ -598,6 +602,7 @@ protected:
     NoHealthyUpstream,
     ResourceLimitExceeded,
     NoRoute,
+    UnauthorizedExternalService,
   };

   // Callbacks for different error and success states during connection establishment
diff --git a/source/common/tcp_proxy/upstream.cc b/source/common/tcp_proxy/upstream.cc
index aea5be7fdd..e7e3825d2e 100644
--- a/source/common/tcp_proxy/upstream.cc
+++ b/source/common/tcp_proxy/upstream.cc
@@ -246,6 +246,10 @@ void TcpConnPool::newStream(GenericConnectionPoolCallbacks& callbacks) {
   }
 }

+Upstream::HostDescriptionConstSharedPtr TcpConnPool::host() const {
+  return conn_pool_data_.value().host();
+}
+
 void TcpConnPool::onPoolFailure(ConnectionPool::PoolFailureReason reason,
                                 absl::string_view failure_reason,
                                 Upstream::HostDescriptionConstSharedPtr host) {
@@ -348,6 +352,10 @@ void HttpConnPool::newStream(GenericConnectionPoolCallbacks& callbacks) {
   }
 }

+Upstream::HostDescriptionConstSharedPtr HttpConnPool::host() const {
+  return conn_pool_data_.value().host();
+}
+
 void HttpConnPool::onPoolFailure(ConnectionPool::PoolFailureReason reason,
                                  absl::string_view failure_reason,
                                  Upstream::HostDescriptionConstSharedPtr host) {
diff --git a/source/common/tcp_proxy/upstream.h b/source/common/tcp_proxy/upstream.h
index 50dcb8a461..a7fd069274 100644
--- a/source/common/tcp_proxy/upstream.h
+++ b/source/common/tcp_proxy/upstream.h
@@ -40,6 +40,7 @@ public:

   // GenericConnPool
   void newStream(GenericConnectionPoolCallbacks& callbacks) override;
+  Upstream::HostDescriptionConstSharedPtr host() const override;

   // Tcp::ConnectionPool::Callbacks
   void onPoolFailure(ConnectionPool::PoolFailureReason reason,
@@ -97,6 +98,7 @@ public:

   // GenericConnPool
   void newStream(GenericConnectionPoolCallbacks& callbacks) override;
+  Upstream::HostDescriptionConstSharedPtr host() const override;

   // Http::ConnectionPool::Callbacks,
   void onPoolFailure(ConnectionPool::PoolFailureReason reason,
diff --git a/source/server/api_listener_impl.h b/source/server/api_listener_impl.h
index a5d03747e7..0c5e1b97ae 100644
--- a/source/server/api_listener_impl.h
+++ b/source/server/api_listener_impl.h
@@ -73,6 +73,9 @@ protected:
     }
     Network::Connection& connection() override { return connection_; }
     const Network::Socket& socket() override { PANIC("not implemented"); }
+    void addUpstreamCallback(const Network::UpstreamCallback&) override {}
+    bool iterateUpstreamCallbacks(Upstream::HostDescriptionConstSharedPtr,
+				  StreamInfo::StreamInfo&) override { return true; }

     // Synthetic class that acts as a stub for the connection backing the
     // Network::ReadFilterCallbacks.
--
2.39.5

