From d094ba4d84f59569eaec9fd40f731648b18fed5f Mon Sep 17 00:00:00 2001
From: Jarno Rajahalme <jarno@isovalent.com>
Date: Mon, 14 Aug 2023 10:01:21 +0300
Subject: [PATCH 3/5] listener: add socket options

This reverts commit 170c89eb0b2afb7a39d44d0f8dfb77444ffc038f.

Signed-off-by: Jarno Rajahalme <jarno@isovalent.com>
---
 envoy/server/factory_context.h                  | 8 +++++++-
 source/common/listener_manager/listener_impl.cc | 3 +++
 source/common/listener_manager/listener_impl.h  | 9 +++++++++
 test/mocks/server/factory_context.h             | 1 +
 test/mocks/server/listener_factory_context.h    | 1 +
 5 files changed, 21 insertions(+), 1 deletion(-)

diff --git a/envoy/server/factory_context.h b/envoy/server/factory_context.h
index ff2fe0ab82..084fd07d17 100644
--- a/envoy/server/factory_context.h
+++ b/envoy/server/factory_context.h
@@ -311,7 +311,13 @@ public:
  * An implementation of FactoryContext. The life time should cover the lifetime of the filter chains
  * and connections. It can be used to create ListenerFilterChain.
  */
-class ListenerFactoryContext : public virtual FactoryContext {};
+class ListenerFactoryContext : public virtual FactoryContext {
+public:
+  /**
+   * Store socket options to be set on the listen socket before listening.
+   */
+  virtual void addListenSocketOptions(const Network::Socket::OptionsSharedPtr& options) PURE;
+};

 /**
  * FactoryContext for ProtocolOptionsFactory.
diff --git a/source/common/listener_manager/listener_impl.cc b/source/common/listener_manager/listener_impl.cc
index dde6593928..e524cc8fd6 100644
--- a/source/common/listener_manager/listener_impl.cc
+++ b/source/common/listener_manager/listener_impl.cc
@@ -876,6 +876,9 @@ PerListenerFactoryContextImpl::getTransportSocketFactoryContext() const {
 Stats::Scope& PerListenerFactoryContextImpl::listenerScope() {
   return listener_factory_context_base_->listenerScope();
 }
+void PerListenerFactoryContextImpl::addListenSocketOptions(const Network::Socket::OptionsSharedPtr& options) {
+  listener_impl_.addListenSocketOptions(options);
+}
 Init::Manager& PerListenerFactoryContextImpl::initManager() { return listener_impl_.initManager(); }

 bool ListenerImpl::createNetworkFilterChain(
diff --git a/source/common/listener_manager/listener_impl.h b/source/common/listener_manager/listener_impl.h
index 30a7d164a9..dac45ee26a 100644
--- a/source/common/listener_manager/listener_impl.h
+++ b/source/common/listener_manager/listener_impl.h
@@ -178,6 +178,8 @@ public:

   Stats::Scope& listenerScope() override;

+  void addListenSocketOptions(const Network::Socket::OptionsSharedPtr& options) override;
+
   ListenerFactoryContextBaseImpl& parentFactoryContext() { return *listener_factory_context_base_; }
   friend class ListenerImpl;

@@ -322,6 +324,13 @@ public:
     return listener_factory_context_->listener_factory_context_base_->listener_info_;
   }

+  void addListenSocketOptions(const Network::Socket::OptionsSharedPtr& append_options) {
+    for (std::vector<Network::Address::InstanceConstSharedPtr>::size_type i = 0;
+      i < addresses_.size(); i++) {
+        addListenSocketOptions(listen_socket_options_list_[i], append_options);
+      }
+  }
+
   void ensureSocketOptions(Network::Socket::OptionsSharedPtr& options) {
     if (options == nullptr) {
       options = std::make_shared<std::vector<Network::Socket::OptionConstSharedPtr>>();
diff --git a/test/mocks/server/factory_context.h b/test/mocks/server/factory_context.h
index 3d273cd89d..cbb09512e1 100644
--- a/test/mocks/server/factory_context.h
+++ b/test/mocks/server/factory_context.h
@@ -32,6 +32,7 @@ public:
   MOCK_METHOD(const Network::DrainDecision&, drainDecision, ());
   MOCK_METHOD(Stats::Scope&, listenerScope, ());
   MOCK_METHOD(const Network::ListenerInfo&, listenerInfo, (), (const));
+  MOCK_METHOD(void, addListenSocketOptions, (const Network::Socket::OptionsSharedPtr&));

   testing::NiceMock<MockServerFactoryContext> server_factory_context_;
   testing::NiceMock<MockTransportSocketFactoryContext> transport_socket_factory_context_;
diff --git a/test/mocks/server/listener_factory_context.h b/test/mocks/server/listener_factory_context.h
index 3d5b6197f0..cbf6dcf6dd 100644
--- a/test/mocks/server/listener_factory_context.h
+++ b/test/mocks/server/listener_factory_context.h
@@ -21,6 +21,7 @@ public:
   MockListenerFactoryContext();
   ~MockListenerFactoryContext() override;

+  MOCK_METHOD(void, addListenSocketOptions, (const Network::Socket::OptionsSharedPtr&));
   MOCK_METHOD(ServerFactoryContext&, serverFactoryContext, (), (const));
   MOCK_METHOD(TransportSocketFactoryContext&, getTransportSocketFactoryContext, (), (const));
   MOCK_METHOD(const Network::DrainDecision&, drainDecision, ());
--
2.45.2

