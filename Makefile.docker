# Copyright 2017-2021 Authors of Cilium
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

ISTIO_VERSION = $(shell grep "ARG ISTIO_VERSION=" Dockerfile.istio_proxy | cut -d = -f2)

DOCKER := $(QUIET)DOCKER_BUILDKIT=1 docker

# Assume buildx if ARCH is explicitly defined
ifdef ARCH
  DOCKER_BUILDX:=1
endif

DOCKER_DEV_ACCOUNT ?= quay.io/cilium
CACHE_REF ?= docker.io/cilium/cilium-dev:cilium-envoy-cache
DOCKER_BUILD_OPTS ?=
DOCKER_CACHE_OPTS ?=
ifndef NO_CACHE
  DOCKER_CACHE_OPTS += --cache-from=$(CACHE_REF)
endif
ifdef DOCKER_BUILDX
  DOCKER := $(DOCKER) buildx
  ifeq ($(ARCH),amd64)
    DOCKER_PLATFORMS := --platform=linux/amd64
  else ifeq ($(ARCH),arm64)
    DOCKER_PLATFORMS := --platform=linux/arm64
  else ifeq ($(ARCH),multi)
    DOCKER_PLATFORMS := --platform=linux/arm64,linux/amd64
  endif
  DOCKER_BUILDER := $(shell docker buildx ls | grep -E -e "[a-zA-Z0-9-]+ \*" | cut -d ' ' -f1)
  ifdef DOCKER_PLATFORMS
    ifeq ($(DOCKER_BUILDER),default)
      DOCKER_BUILDKIT_DRIVER :=
      ifdef DOCKER_BUILDKIT_IMAGE
        DOCKER_BUILDKIT_DRIVER := --driver docker-container --driver-opt image=$(DOCKER_BUILDKIT_IMAGE)
      endif
      BUILDER_SETUP := $(shell docker buildx create $(DOCKER_PLATFORMS) $(DOCKER_BUILDKIT_DRIVER) --use)
      DOCKER_BUILDER := $(shell docker buildx ls | grep -E -e "[a-zA-Z0-9-]+ \*" | cut -d ' ' -f1)
    endif
  endif
  ifneq ($(DOCKER_BUILDER),default)
    # Only insert '--push' if user did not pass a conflicting '--output' option
    ifeq ($(findstring --output,$(DOCKER_BUILD_OPTS)),)
      DOCKER_BUILD_OPTS += --push
    endif
    DOCKER_BUILD_OPTS += $(DOCKER_PLATFORMS)
    ifdef CACHE_PUSH
      ifeq ($(true,1,$(CACHE_PUSH)),true)
        CACHE_TO_REF := $(CACHE_REF)
      else
        CACHE_TO_REF := $(CACHE_PUSH)
      endif
      DOCKER_CACHE_OPTS += --cache-to=type=registry,ref=$(CACHE_TO_REF),mode=max
    endif
  endif
  $(info Using Docker Buildx builder "$(DOCKER_BUILDER)" with build flags "$(DOCKER_BUILD_OPTS)".)
endif

SLASH = -
ARCH ?= $(subst aarch64,arm64,$(subst x86_64,amd64,$(patsubst i%86,386,$(shell uname -m))))
# Add -<arch> suffix if ARCH is not "multi"
ifeq ($(ARCH),multi)
  ARCH :=
else
  IMAGE_ARCH := $(SLASH)$(ARCH)
endif

DOCKERFILE_ARCH = .multi_arch

SOURCE_VERSION :=

# This makefile may only be used with a git repo present
SOURCE_VERSION := $(shell git rev-parse HEAD)
SOURCE_VERSION: force
	@if [ "$(SOURCE_VERSION)" != "`cat 2>/dev/null SOURCE_VERSION`" ] ; then echo "$(SOURCE_VERSION)" >SOURCE_VERSION; fi

BAZEL_VERSION := $(shell cat .bazelversion)
BAZEL_ARCH_TAG := bazel-$(BAZEL_VERSION)$(IMAGE_ARCH)
BRANCH_TAG := $(shell git rev-parse --abbrev-ref HEAD | tr -c '[:alnum:]_.\n-' '-')

BUILDER_IMAGE_OPTS ?=
ifdef BUILDER_IMAGE
  BUILDER_IMAGE_OPTS += --build-arg BUILDER_IMAGE=$(BUILDER_IMAGE) --build-arg BUILDER=use-updated
else
  # Default builder refresh image ref
  BUILDER_IMAGE := $(DOCKER_DEV_ACCOUNT)/cilium-envoy-builder:release-archive-latest
endif

.PHONY: dockerignore-builder
dockerignore-builder:
	echo "*" >.dockerignore
	echo "!.bazelversion" >>.dockerignore

.PHONY: dockerignore-release
dockerignore-release:
	echo "/.git/" >.dockerignore
	sed -e '# Remove lines with white space, comments and files that must be passed to docker, "$$" due to make. #' \
		-e '/^[[:space:]]*$$/d' -e '/^#/d' -e '/SOURCE_VERSION/d' \
	    -e '# Apply pattern in all directories if it contains no "/", keep "!" up front. #' \
		-e '/^[^!/][^/]*$$/s<^<**/<' -e '/^![^/]*$$/s<^!<!**/<' \
	    -e '# Remove leading "./", keep "!" up front. #' \
		-e 's<^\./<<' -e 's<^!\./<!<' \
	    -e '# Append newline to the last line if missing. GNU sed does not do this automatically. #' \
		-e "$$a" \
	    .gitignore >> .dockerignore
	echo "/.gitignore" >>.dockerignore
	echo "/.clang-format" >>.dockerignore
	echo "/go/" >>.dockerignore
	echo "/go.*" >>.dockerignore
	echo "/tests/" >>.dockerignore
	echo "/Dockerfile*" >>.dockerignore
	echo "/Makefile.dev" >>.dockerignore
	echo "/Makefile.api" >>.dockerignore
	echo "/Makefile.docker" >>.dockerignore
	echo "/envoy_binary_test.sh" >>.dockerignore
	echo "/README*" >>.dockerignore
	echo "/envoy_bootstrap_v2.patch" >>.dockerignore

.PHONY: docker-image-builder
docker-image-builder: Dockerfile.builder SOURCE_VERSION dockerignore-builder
	$(DOCKER) build $(DOCKER_BUILD_OPTS) --build-arg BAZEL_BUILD_OPTS="$(BAZEL_BUILD_OPTS)" -f $< -t $(DOCKER_DEV_ACCOUNT)/cilium-envoy-builder:$(BAZEL_ARCH_TAG) .

.PHONY: docker-builder-archive
docker-builder-archive: Dockerfile SOURCE_VERSION dockerignore-archive
	$(DOCKER) build --target builder-archive $(DOCKER_BUILD_OPTS) $(DOCKER_CACHE_OPTS) --build-arg BAZEL_BUILD_OPTS="$(BAZEL_BUILD_OPTS)" -t $(BUILDER_IMAGE) .

ifeq ($(BRANCH_TAG),"master")
  DOCKER_IMAGE_ENVOY_TAGS := -t $(DOCKER_DEV_ACCOUNT)/cilium-envoy:$(SOURCE_VERSION)$(IMAGE_ARCH)
  DOCKER_IMAHE_ENVOY_TAGS += -t $(DOCKER_DEV_ACCOUNT)/cilium-envoy:latest$(IMAGE_ARCH)
else
  DOCKER_IMAGE_ENVOY_TAGS := -t $(DOCKER_DEV_ACCOUNT)/cilium-envoy-dev:$(BRANCH_TAG)$(IMAGE_ARCH)
endif

.PHONY: docker-image-envoy
docker-image-envoy: Dockerfile SOURCE_VERSION dockerignore-release
	@$(ECHO_GEN) docker-image-envoy
	$(DOCKER) build $(DOCKER_BUILD_OPTS) $(DOCKER_CACHE_OPTS) $(BUILDER_IMAGE_OPTS) --build-arg BAZEL_BUILD_OPTS="$(BAZEL_BUILD_OPTS)" $(DOCKER_IMAGE_ENVOY_TAGS) .

#Build multi-arch Envoy image builder
docker-image-builder-multiarch: Dockerfile.builder$(DOCKERFILE_ARCH) SOURCE_VERSION dockerignore-builder
	$(DOCKER) build -f $< -t $(DOCKER_DEV_ACCOUNT)/cilium-envoy-builder-dev:$(SOURCE_VERSION)$(IMAGE_ARCH) --build-arg ARCH=$(ARCH) .
	$(DOCKER) tag $(DOCKER_DEV_ACCOUNT)/cilium-envoy-builder-dev:$(SOURCE_VERSION)$(IMAGE_ARCH) \
		$(DOCKER_DEV_ACCOUNT)/cilium-envoy-builder-dev:latest$(IMAGE_ARCH)
ifeq ($(ARCH),amd64)
	$(DOCKER) tag $(DOCKER_DEV_ACCOUNT)/cilium-envoy-builder-dev:$(SOURCE_VERSION)$(IMAGE_ARCH) \
		$(DOCKER_DEV_ACCOUNT)/cilium-envoy-builder-dev:$(SOURCE_VERSION)
	$(DOCKER) tag $(DOCKER_DEV_ACCOUNT)/cilium-envoy-builder-dev:$(SOURCE_VERSION) \
		$(DOCKER_DEV_ACCOUNT)/cilium-envoy-builder-dev:latest
endif

#Build multi-arch Envoy image
docker-image-envoy-multiarch: Dockerfile$(DOCKERFILE_ARCH) SOURCE_VERSION dockerignore-release
	@$(ECHO_GEN) docker-image-envoy
	$(DOCKER) build -t $(DOCKER_DEV_ACCOUNT)/cilium-envoy:$(SOURCE_VERSION)$(IMAGE_ARCH) \
	          -f Dockerfile$(DOCKERFILE_ARCH) .
	$(DOCKER) tag $(DOCKER_DEV_ACCOUNT)/cilium-envoy:$(SOURCE_VERSION)$(IMAGE_ARCH) \
		$(DOCKER_DEV_ACCOUNT)/cilium-envoy:latest$(IMAGE_ARCH)
ifeq ($(ARCH),amd64)
	$(DOCKER) tag $(DOCKER_DEV_ACCOUNT)/cilium-envoy:$(SOURCE_VERSION)$(IMAGE_ARCH) \
		$(DOCKER_DEV_ACCOUNT)/cilium-envoy:$(SOURCE_VERSION)
	$(DOCKER) tag $(DOCKER_DEV_ACCOUNT)/cilium-envoy:$(SOURCE_VERSION)$(IMAGE_ARCH) \
		$(DOCKER_DEV_ACCOUNT)/cilium-envoy:latest
endif
	$(QUIET)echo "Push like this when ready:"
	$(QUIET)echo "docker push $(DOCKER_DEV_ACCOUNT)/cilium-envoy:$(SOURCE_VERSION)$(IMAGE_ARCH)"
ifeq ($(ARCH),amd64)
	$(QUIET)echo "docker push $(DOCKER_DEV_ACCOUNT)/cilium-envoy:$(SOURCE_VERSION)"
	$(QUIET)echo "docker push $(DOCKER_DEV_ACCOUNT)/cilium-envoy:latest"
endif

#Push multi-arch support with fat-manifest:

ifeq ($(BRANCH_TAG),"master")
  DOCKER_IMAGE_TAG := $(SOURCE_VERSION)
else
  DOCKER_IMAGE_TAG := $(BRANCH_TAG)
endif

envoy-builder-manifest:
	tools/push_manifest.sh cilium-envoy-builder $(DOCKER_IMAGE_TAG)
	tools/push_manifest.sh cilium-envoy-builder latest

docker-envoy-manifest:
	tools/push_manifest.sh cilium-envoy $(DOCKER_IMAGE_TAG)
	tools/push_manifest.sh cilium-envoy latest

#Push multi-arch support with images uploaded:
envoy-builder-image-manifest:
	tools/push_manifest.sh -i cilium-envoy-builder $(DOCKER_IMAGE_TAG)
	tools/push_manifest.sh -i cilium-envoy-builder latest

docker-envoy-image-manifest:
	tools/push_manifest.sh -i cilium-envoy $(DOCKER_IMAGE_TAG)
	tools/push_manifest.sh -i cilium-envoy latest

docker-istio-proxy: Dockerfile.istio_proxy envoy_bootstrap_tmpl.json
	@$(ECHO_GEN) docker-istio-proxy
	$(DOCKER) build --build-arg BAZEL_BUILD_OPTS="$(BAZEL_BUILD_OPTS)" -f $< -t cilium/istio_proxy:$(ISTIO_VERSION) .
	$(QUIET)echo "Push like this when ready:"
	$(QUIET)echo "docker push cilium/istio_proxy:$(ISTIO_VERSION)"
