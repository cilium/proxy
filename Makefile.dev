# Copyright 2017-2021 Authors of Cilium
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This image is used to extract proxylib/libcilium.so only for "tests" target.
CILIUM_REF=quay.io/cilium/cilium:stable

CHECK_FORMAT ?= ./bazel-bin/check_format.py.runfiles/envoy/tools/code_format/check_format.py

BAZEL_CACHE ?= ~/.cache/bazel
BAZEL_ARCHIVE ?= ~/bazel-cache.tar.bz2
CLANG_FORMAT ?= clang-format
BUILDIFIER ?= buildifier

all: precheck envoy-default

api: force-non-root Makefile.api envoy-deps-fastbuild
	$(MAKE) -f Makefile.api all

envoy-deps-fastbuild: $(COMPILER_DEP) SOURCE_VERSION
	@$(ECHO_BAZEL)
	$(BAZEL) $(BAZEL_OPTS) build $(BAZEL_BUILD_OPTS) //:cilium-envoy-deps $(BAZEL_FILTER)

envoy-default: $(COMPILER_DEP) SOURCE_VERSION
	@$(ECHO_BAZEL)
	$(BAZEL) $(BAZEL_OPTS) build $(BAZEL_BUILD_OPTS) //:cilium-envoy $(BAZEL_FILTER)

debug: envoy-debug

envoy-debug: $(COMPILER_DEP) SOURCE_VERSION
	@$(ECHO_BAZEL)
	$(BAZEL) $(BAZEL_OPTS) build $(BAZEL_BUILD_OPTS) -c dbg //:cilium-envoy $(BAZEL_FILTER)

$(CHECK_FORMAT): force-non-root SOURCE_VERSION
	$(BAZEL) $(BAZEL_OPTS) build $(BAZEL_BUILD_OPTS) //:check_format.py

veryclean: force-non-root clean
	-sudo $(BAZEL) $(BAZEL_OPTS) clean
	-sudo rm -Rf $(BAZEL_CACHE)

precheck: force-non-root
	tools/check_repositories.sh

check: $(CHECK_FORMAT) force-non-root
	CLANG_FORMAT=$(CLANG_FORMAT) BUILDIFIER=$(BUILDIFIER) $(CHECK_FORMAT) --skip_envoy_build_rule_check --add-excluded-prefixes "./linux/" "./proxylib/" --build_fixer_check_excluded_paths="./" check

fix: $(CHECK_FORMAT) force-non-root
	CLANG_FORMAT=$(CLANG_FORMAT) BUILDIFIER=$(BUILDIFIER) $(CHECK_FORMAT) --skip_envoy_build_rule_check --add-excluded-prefixes "./linux/" "./proxylib/" --build_fixer_check_excluded_paths="./" fix

# Fetch proxylib for the target architecture.
# Run rule even if file exists, as it can be for a wrong architecture
.PHONY: proxylib/libcilium.so
proxylib/libcilium.so:
	if ! file $@ | grep $(subst k8,x86-64,$(BAZEL_ARCH)); then \
		PROXYLIB_DIGEST=$$(docker buildx imagetools inspect quay.io/cilium/cilium:stable --raw | jq -r '.manifests[] | select(.platform.architecture == "$(TARGETARCH)") | .digest') && \
		docker create -ti --name cilium-proxylib $(CILIUM_REF)@$${PROXYLIB_DIGEST} bash && \
		docker cp -L cilium-proxylib:/usr/lib/libcilium.so $@ && \
		docker rm -fv cilium-proxylib ; \
	fi

# Run tests without debug by default.
tests: proxylib/libcilium.so force-non-root SOURCE_VERSION
	$(BAZEL) $(BAZEL_OPTS) test $(BAZEL_BUILD_OPTS) //:envoy_binary_test $(BAZEL_FILTER)
	$(BAZEL) $(BAZEL_OPTS) test $(BAZEL_BUILD_OPTS) $(BAZEL_TEST_OPTS) //tests/... $(BAZEL_FILTER)

debug-tests: proxylib/libcilium.so force-non-root SOURCE_VERSION
	$(BAZEL) $(BAZEL_OPTS) test $(BAZEL_BUILD_OPTS) -c debug $(BAZEL_TEST_OPTS) //:envoy_binary_test $(BAZEL_FILTER)
	$(BAZEL) $(BAZEL_OPTS) test $(BAZEL_BUILD_OPTS) -c debug $(BAZEL_TEST_OPTS) //tests/... $(BAZEL_FILTER)
