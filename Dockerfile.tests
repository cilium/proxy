# 
# BUILDER_BASE is a multi-platform image with all the build tools
#
ARG BUILDER_BASE=quay.io/cilium/cilium-envoy-builder:bazel-5.1.1@sha256:9e94c4c6b5bca30e0fee62e652c9a7ef07b0feeb86d4eb12b068336d95887f31

# This image is used to extract proxylib/libcilium.so for testing.
ARG PROXYLIB=quay.io/cilium/cilium:stable

#
# BUILDER_IMAGE defaults to the result of the first stage below,
# refreshing the build caches from Envoy dependencies before the final
# build stage. This can be overridden on docker build command line to
# use pre-built dependencies. Note that if cross-compiling, these
# pre-built dependencies will include BUILDPLATFORM build tools and
# TARGETPLATFORM build artifacts, and thus can only be reused when
# building on the same BUILDPLATFORM.
#
ARG BUILDER_IMAGE=builder-fresh

FROM $PROXYLIB as proxylib

FROM --platform=$BUILDPLATFORM $BUILDER_BASE as builder-fresh
LABEL maintainer="maintainer@cilium.io"
WORKDIR /cilium/proxy
COPY . ./
COPY --from=proxylib /usr/lib/libcilium.so proxylib/libcilium.so
ARG V
ARG BAZEL_BUILD_OPTS
ARG BUILDARCH
ARG TARGETARCH
ARG NO_CACHE
ENV TARGETARCH=$TARGETARCH

#
# Build dependencies
#
RUN BAZEL_BUILD_OPTS="${BAZEL_BUILD_OPTS} --disk_cache=/tmp/bazel-cache" PKG_BUILD=1 V=$V make envoy-test-deps

# By default this stage picks up the result of the build above, but BUILDER_IMAGE can be
# overridden to point to a saved image of an earlier run of that stage.
FROM $BUILDER_IMAGE as builder-cache

FROM --platform=$BUILDPLATFORM $BUILDER_BASE as builder
LABEL maintainer="maintainer@cilium.io"
WORKDIR /cilium/proxy
COPY . ./
COPY --from=proxylib /usr/lib/libcilium.so proxylib/libcilium.so
ARG V
ARG COPY_CACHE_EXT
ARG BAZEL_BUILD_OPTS
ARG TARGETARCH
ENV TARGETARCH=$TARGETARCH

# Clear runner's cache when building deps
RUN --mount=target=/root/.cache,type=cache,id=$TARGETARCH,sharing=private rm -rf /root/.cache/*
RUN --mount=target=/tmp/bazel-cache,source=/tmp/bazel-cache,from=builder-cache,rw \
    BAZEL_BUILD_OPTS="${BAZEL_BUILD_OPTS} --disk_cache=/tmp/bazel-cache" PKG_BUILD=1 V=$V make envoy-test-deps && \
    if [ -n "${COPY_CACHE_EXT}" ]; then cp -ra /tmp/bazel-cache /tmp/bazel-cache${COPY_CACHE_EXT}; fi

FROM --platform=$BUILDPLATFORM $BUILDER_BASE as runner
LABEL maintainer="maintainer@cilium.io"
WORKDIR /cilium/proxy
COPY . ./
COPY --from=proxylib /usr/lib/libcilium.so proxylib/libcilium.so
ARG V
ARG BAZEL_BUILD_OPTS
ARG BUILDARCH
ARG TARGETARCH
ENV TARGETARCH=$TARGETARCH

RUN --mount=target=/root/.cache,type=cache,id=$TARGETARCH,sharing=private \
    --mount=target=/tmp/bazel-cache,source=/tmp/bazel-cache,from=builder-cache,rw \
    if [ "$TARGETARCH" != "$BUILDARCH" ]; then \
      if [ "$TARGETARCH" = "amd64" ]; then \
        # Allow running x86_64 test binaries via qemu \
        ln -s /usr/x86_64-linux-gnu/lib/ld-linux-x86-64.so.* /lib; \
        ln -s /lib /lib64; \
        LD_LIBRARY_PATH=/usr/x86_64-linux-gnu/lib; \
      elif [ "$TARGETARCH" = "arm64" ]; then \
        # Allow running aarch64 test binaries via qemu \
        ln -s /usr/aarch64-linux-gnu/lib/ld-linux-aarch64.so.* /lib; \
        LD_LIBRARY_PATH=/usr/aarch64-linux-gnu/lib; \
      fi; \
    fi && \
    echo "using LD_LIBRARY_PATH=${LD_LIBRARY_PATH} for running tests" && \
    BAZEL_BUILD_OPTS="${BAZEL_BUILD_OPTS} --disk_cache=/tmp/bazel-cache --test_env=LD_LIBRARY_PATH=${LD_LIBRARY_PATH}" \
    PKG_BUILD=1 V=$V make envoy-tests && \
    cp -Lr /cilium/proxy/bazel-testlogs testlogs

FROM scratch as empty-builder-archive
LABEL maintainer="maintainer@cilium.io"
WORKDIR /tmp/bazel-cache

# This stage retains only the build caches from the builder stage.
# This is used as the target for persisting Bazel build caches for later re-use.
FROM empty-builder-archive as builder-archive
ARG COPY_CACHE_EXT
COPY --from=builder /tmp/bazel-cache${COPY_CACHE_EXT}/ /tmp/bazel-cache/

#
# Keep only the test logs
#
FROM scratch as testlogs
LABEL maintainer="maintainer@cilium.io"
COPY --from=runner /cilium/proxy/testlogs testlogs
